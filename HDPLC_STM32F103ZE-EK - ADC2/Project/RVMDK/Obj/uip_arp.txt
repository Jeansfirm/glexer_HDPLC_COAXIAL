; generated by ARM C/C++ Compiler, 4.1 [Build 561]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\uip_arp.o --depend=.\Obj\uip_arp.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_DM9000 -I..\..\Libraries\uIP-1.0\apps\hello-world -ID:\Keil4\ARM\INC -ID:\Keil4\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\Libraries\uIP-1.0\uip\uip_arp.c]
                          THUMB

                          AREA ||i.uip_arp_arpin||, CODE, READONLY, ALIGN=2

                  uip_arp_arpin PROC
;;;277    void
;;;278    uip_arp_arpin(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;279    {
;;;280    
;;;281      if(uip_len < sizeof(struct arp_hdr)) {
000004  482d              LDR      r0,|L1.188|
;;;282        uip_len = 0;
000006  2100              MOVS     r1,#0
000008  8802              LDRH     r2,[r0,#0]            ;281  ; uip_len
00000a  2a2a              CMP      r2,#0x2a              ;281
00000c  d202              BCS      |L1.20|
00000e  8001              STRH     r1,[r0,#0]
                  |L1.16|
;;;283        return;
;;;284      }
;;;285      uip_len = 0;
;;;286    
;;;287      switch(BUF->opcode) {
;;;288      case HTONS(ARP_REQUEST):
;;;289        /* ARP request. If it asked for our address, we send out a
;;;290           reply. */
;;;291        if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
;;;292    
;;;293          /* First, we register the one who made the request in our ARP
;;;294    	 table, since it is likely that we will do more communication
;;;295    	 with this host in the future. */
;;;296          uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
;;;297    
;;;298          /* The reply opcode is 2. */
;;;299          BUF->opcode = HTONS(2);
;;;300    
;;;301          memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
;;;302          memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
;;;303          memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
;;;304          memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
;;;305    
;;;306          BUF->dipaddr[0] = BUF->sipaddr[0];
;;;307          BUF->dipaddr[1] = BUF->sipaddr[1];
;;;308          BUF->sipaddr[0] = uip_hostaddr[0];
;;;309          BUF->sipaddr[1] = uip_hostaddr[1];
;;;310    
;;;311          BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
;;;312          uip_len = sizeof(struct arp_hdr);
;;;313        }
;;;314        break;
;;;315      case HTONS(ARP_REPLY):
;;;316        /* ARP reply. We insert or update the ARP table if it was meant
;;;317           for us. */
;;;318        if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
;;;319          uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
;;;320        }
;;;321        break;
;;;322      }
;;;323    
;;;324      return;
;;;325    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L1.20|
000014  8001              STRH     r1,[r0,#0]            ;285
000016  f8df80a8          LDR      r8,|L1.192|
00001a  4c2a              LDR      r4,|L1.196|
00001c  4645              MOV      r5,r8                 ;287
00001e  f1050116          ADD      r1,r5,#0x16           ;296
000022  4681              MOV      r9,r0                 ;285
000024  f8b87014          LDRH     r7,[r8,#0x14]         ;287  ; uip_buf
000028  8cea              LDRH     r2,[r5,#0x26]         ;291
00002a  1d88              ADDS     r0,r1,#6              ;296
00002c  8823              LDRH     r3,[r4,#0]            ;291
00002e  8d2d              LDRH     r5,[r5,#0x28]         ;291
000030  8866              LDRH     r6,[r4,#2]            ;291
000032  f44f7a00          MOV      r10,#0x200            ;287
000036  f5b77f80          CMP      r7,#0x100             ;287
00003a  d009              BEQ      |L1.80|
00003c  4557              CMP      r7,r10                ;287
00003e  d1e7              BNE      |L1.16|
000040  429a              CMP      r2,r3                 ;318
000042  d1e5              BNE      |L1.16|
000044  42b5              CMP      r5,r6                 ;318
000046  d1e3              BNE      |L1.16|
000048  e8bd47f0          POP      {r4-r10,lr}           ;319
00004c  f7ffbffe          B.W      uip_arp_update
                  |L1.80|
000050  429a              CMP      r2,r3                 ;291
000052  d1dd              BNE      |L1.16|
000054  42b5              CMP      r5,r6                 ;291
000056  d1db              BNE      |L1.16|
000058  f7fffffe          BL       uip_arp_update
00005c  f8a8a014          STRH     r10,[r8,#0x14]        ;299
000060  f8d80016          LDR      r0,[r8,#0x16]         ;301  ; uip_buf
000064  f8c80020          STR      r0,[r8,#0x20]         ;301  ; uip_buf
000068  4b17              LDR      r3,|L1.200|
00006a  f8b8101a          LDRH     r1,[r8,#0x1a]         ;301  ; uip_buf
00006e  f8a81024          STRH     r1,[r8,#0x24]         ;301
000072  681a              LDR      r2,[r3,#0]            ;302  ; uip_ethaddr
000074  f8c82016          STR      r2,[r8,#0x16]         ;302  ; uip_buf
000078  889b              LDRH     r3,[r3,#4]            ;302  ; uip_ethaddr
00007a  f8a8301a          STRH     r3,[r8,#0x1a]         ;302
00007e  f8c82006          STR      r2,[r8,#6]            ;303  ; uip_buf
000082  f8a8300a          STRH     r3,[r8,#0xa]          ;303
000086  f8c80000          STR      r0,[r8,#0]            ;304  ; uip_buf
00008a  f8a81004          STRH     r1,[r8,#4]            ;304
00008e  f8b8001c          LDRH     r0,[r8,#0x1c]         ;306  ; uip_buf
000092  f8a80026          STRH     r0,[r8,#0x26]         ;306
000096  f8b8001e          LDRH     r0,[r8,#0x1e]         ;307  ; uip_buf
00009a  f8a80028          STRH     r0,[r8,#0x28]         ;307
00009e  8820              LDRH     r0,[r4,#0]            ;308  ; uip_hostaddr
0000a0  f8a8001c          STRH     r0,[r8,#0x1c]         ;308
0000a4  8860              LDRH     r0,[r4,#2]            ;309  ; uip_hostaddr
0000a6  f8a8001e          STRH     r0,[r8,#0x1e]         ;309
0000aa  f44f60c1          MOV      r0,#0x608             ;311
0000ae  f8a8000c          STRH     r0,[r8,#0xc]          ;311
0000b2  212a              MOVS     r1,#0x2a              ;312
0000b4  f8a91000          STRH     r1,[r9,#0]            ;312
0000b8  e7aa              B        |L1.16|
;;;326    /*-----------------------------------------------------------------------------------*/
                          ENDP

0000ba  0000              DCW      0x0000
                  |L1.188|
                          DCD      uip_len
                  |L1.192|
                          DCD      uip_buf
                  |L1.196|
                          DCD      uip_hostaddr
                  |L1.200|
                          DCD      uip_ethaddr

                          AREA ||i.uip_arp_init||, CODE, READONLY, ALIGN=2

                  uip_arp_init PROC
;;;124    void
;;;125    uip_arp_init(void)
000000  b510              PUSH     {r4,lr}
;;;126    {
;;;127      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
000002  4a08              LDR      r2,|L2.36|
000004  2100              MOVS     r1,#0
;;;128        memset(arp_table[i].ipaddr, 0, 4);
000006  4c08              LDR      r4,|L2.40|
000008  7011              STRB     r1,[r2,#0]            ;127
                  |L2.10|
00000a  7810              LDRB     r0,[r2,#0]  ; i
00000c  eb000340          ADD      r3,r0,r0,LSL #1
000010  eb040383          ADD      r3,r4,r3,LSL #2
000014  1c40              ADDS     r0,r0,#1              ;127
000016  b2c0              UXTB     r0,r0                 ;127
000018  6019              STR      r1,[r3,#0]
00001a  7010              STRB     r0,[r2,#0]            ;127
00001c  2808              CMP      r0,#8                 ;127
00001e  d3f4              BCC      |L2.10|
;;;129      }
;;;130    }
000020  bd10              POP      {r4,pc}
;;;131    /*-----------------------------------------------------------------------------------*/
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      ||.data||
                  |L2.40|
                          DCD      ||.bss||

                          AREA ||i.uip_arp_out||, CODE, READONLY, ALIGN=2

                  uip_arp_out PROC
;;;354    void
;;;355    uip_arp_out(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;356    {
;;;357      struct arp_entry *tabptr;
;;;358    
;;;359      /* Find the destination IP address in the ARP table and construct
;;;360         the Ethernet header. If the destination IP addres isn't on the
;;;361         local network, we use the default router's IP address instead.
;;;362    
;;;363         If not ARP table entry is found, we overwrite the original IP
;;;364         packet with an ARP request for the IP address. */
;;;365    
;;;366      /* First check if destination is a local broadcast. */
;;;367      if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
000004  f8df812c          LDR      r8,|L3.308|
;;;368        memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
;;;369      } else {
;;;370        /* Check if the destination address is on the local network. */
;;;371        if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
;;;372          /* Destination address was not on the local network, so we need to
;;;373    	 use the default router's IP address instead of the destination
;;;374    	 address when determining the MAC address. */
;;;375          uip_ipaddr_copy(ipaddr, uip_draddr);
;;;376        } else {
;;;377          /* Else, we use the destination IP address. */
;;;378          uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
;;;379        }
;;;380    
;;;381        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
;;;382          tabptr = &arp_table[i];
;;;383          if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
;;;384    	break;
;;;385          }
;;;386        }
;;;387    
;;;388        if(i == UIP_ARPTAB_SIZE) {
;;;389          /* The destination address was not in our ARP table, so we
;;;390    	 overwrite the IP packet with an ARP request. */
;;;391    
;;;392          memset(BUF->ethhdr.dest.addr, 0xff, 6);
;;;393          memset(BUF->dhwaddr.addr, 0x00, 6);
;;;394          memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
000008  f8df912c          LDR      r9,|L3.312|
00000c  4640              MOV      r0,r8                 ;367
00000e  f8b8201e          LDRH     r2,[r8,#0x1e]         ;367  ; uip_buf
000012  f64f71ff          MOV      r1,#0xffff            ;367
;;;395          memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
;;;396    
;;;397          uip_ipaddr_copy(BUF->dipaddr, ipaddr);
;;;398          uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
;;;399          BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
;;;400          BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
;;;401          BUF->protocol = HTONS(UIP_ETHTYPE_IP);
;;;402          BUF->hwlen = 6;
;;;403          BUF->protolen = 4;
;;;404          BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
;;;405    
;;;406          uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
;;;407    
;;;408          uip_len = sizeof(struct arp_hdr);
000016  f8dfb124          LDR      r11,|L3.316|
00001a  8c00              LDRH     r0,[r0,#0x20]         ;367
00001c  f8b94004          LDRH     r4,[r9,#4]            ;394
000020  428a              CMP      r2,r1                 ;367
000022  d109              BNE      |L3.56|
000024  4288              CMP      r0,r1                 ;367
000026  d107              BNE      |L3.56|
000028  4845              LDR      r0,|L3.320|
00002a  6801              LDR      r1,[r0,#0]            ;368  ; broadcast_ethaddr
00002c  f8c81000          STR      r1,[r8,#0]            ;368  ; uip_buf
000030  8880              LDRH     r0,[r0,#4]            ;368  ; broadcast_ethaddr
000032  f8a80004          STRH     r0,[r8,#4]            ;368
000036  e03a              B        |L3.174|
                  |L3.56|
000038  4f42              LDR      r7,|L3.324|
00003a  4943              LDR      r1,|L3.328|
00003c  883d              LDRH     r5,[r7,#0]            ;371  ; uip_netmask
00003e  f8b1a000          LDRH     r10,[r1,#0]           ;371  ; uip_hostaddr
000042  ea020305          AND      r3,r2,r5              ;371
000046  ea0a0605          AND      r6,r10,r5             ;371
00004a  884d              LDRH     r5,[r1,#2]            ;371
00004c  493f              LDR      r1,|L3.332|
00004e  42b3              CMP      r3,r6                 ;371
000050  d105              BNE      |L3.94|
000052  887e              LDRH     r6,[r7,#2]            ;371  ; uip_netmask
000054  ea000306          AND      r3,r0,r6              ;371
000058  402e              ANDS     r6,r6,r5              ;371
00005a  42b3              CMP      r3,r6                 ;371
00005c  d004              BEQ      |L3.104|
                  |L3.94|
00005e  483c              LDR      r0,|L3.336|
000060  8802              LDRH     r2,[r0,#0]            ;375  ; uip_draddr
000062  800a              STRH     r2,[r1,#0]            ;375
000064  8840              LDRH     r0,[r0,#2]            ;375  ; uip_draddr
000066  e000              B        |L3.106|
                  |L3.104|
000068  800a              STRH     r2,[r1,#0]            ;378
                  |L3.106|
00006a  8048              STRH     r0,[r1,#2]            ;378
00006c  4837              LDR      r0,|L3.332|
00006e  2200              MOVS     r2,#0                 ;381
000070  1f00              SUBS     r0,r0,#4              ;381
000072  f8dfc0e0          LDR      r12,|L3.340|
000076  7002              STRB     r2,[r0,#0]            ;381
000078  880e              LDRH     r6,[r1,#0]            ;375
00007a  884f              LDRH     r7,[r1,#2]            ;375
                  |L3.124|
00007c  b2d2              UXTB     r2,r2                 ;382
00007e  eb020142          ADD      r1,r2,r2,LSL #1       ;382
000082  eb0c0181          ADD      r1,r12,r1,LSL #2      ;382
000086  880b              LDRH     r3,[r1,#0]            ;383
000088  429e              CMP      r6,r3                 ;383
00008a  d102              BNE      |L3.146|
00008c  884b              LDRH     r3,[r1,#2]            ;383
00008e  429f              CMP      r7,r3                 ;383
000090  d004              BEQ      |L3.156|
                  |L3.146|
000092  1c52              ADDS     r2,r2,#1              ;381
000094  b2d2              UXTB     r2,r2                 ;381
000096  7002              STRB     r2,[r0,#0]            ;381
000098  2a08              CMP      r2,#8                 ;381
00009a  d3ef              BCC      |L3.124|
                  |L3.156|
00009c  b2d0              UXTB     r0,r2                 ;388
00009e  2808              CMP      r0,#8                 ;388
0000a0  d012              BEQ      |L3.200|
;;;409          return;
;;;410        }
;;;411    
;;;412        /* Build an ethernet header. */
;;;413        memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
0000a2  684a              LDR      r2,[r1,#4]
0000a4  f8c82000          STR      r2,[r8,#0]  ; uip_buf
0000a8  8909              LDRH     r1,[r1,#8]
0000aa  f8a81004          STRH     r1,[r8,#4]
                  |L3.174|
;;;414      }
;;;415      memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
0000ae  f8d90000          LDR      r0,[r9,#0]  ; uip_ethaddr
0000b2  f8c80006          STR      r0,[r8,#6]  ; uip_buf
0000b6  f8a8400a          STRH     r4,[r8,#0xa]
;;;416    
;;;417      IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
0000ba  2008              MOVS     r0,#8
0000bc  f8a8000c          STRH     r0,[r8,#0xc]
;;;418    
;;;419      uip_len += sizeof(struct uip_eth_hdr);
0000c0  f8bb1000          LDRH     r1,[r11,#0]  ; uip_len
0000c4  310e              ADDS     r1,r1,#0xe
;;;420    }
0000c6  e030              B        |L3.298|
                  |L3.200|
0000c8  22ff              MOVS     r2,#0xff              ;392
0000ca  2106              MOVS     r1,#6                 ;392
0000cc  4819              LDR      r0,|L3.308|
0000ce  f7fffffe          BL       __aeabi_memset
0000d2  2100              MOVS     r1,#0                 ;393
0000d4  f8c81020          STR      r1,[r8,#0x20]         ;393  ; uip_buf
0000d8  f8a81024          STRH     r1,[r8,#0x24]         ;393
0000dc  f8d91000          LDR      r1,[r9,#0]            ;394  ; uip_ethaddr
0000e0  f8c81006          STR      r1,[r8,#6]            ;394  ; uip_buf
0000e4  f8a8400a          STRH     r4,[r8,#0xa]          ;394
0000e8  f8c81016          STR      r1,[r8,#0x16]         ;395  ; uip_buf
0000ec  f8a8401a          STRH     r4,[r8,#0x1a]         ;395
0000f0  f8a86026          STRH     r6,[r8,#0x26]         ;397
0000f4  f8a87028          STRH     r7,[r8,#0x28]         ;397
0000f8  f8a8a01c          STRH     r10,[r8,#0x1c]        ;398
0000fc  f8a8501e          STRH     r5,[r8,#0x1e]         ;398
000100  f44f7180          MOV      r1,#0x100             ;399
000104  f8a81014          STRH     r1,[r8,#0x14]         ;399
000108  4640              MOV      r0,r8                 ;393
00010a  f8a8100e          STRH     r1,[r8,#0xe]          ;400
00010e  2108              MOVS     r1,#8                 ;401
000110  8201              STRH     r1,[r0,#0x10]         ;401
000112  2106              MOVS     r1,#6                 ;402
000114  7481              STRB     r1,[r0,#0x12]         ;402
000116  2104              MOVS     r1,#4                 ;403
000118  74c1              STRB     r1,[r0,#0x13]         ;403
00011a  f44f61c1          MOV      r1,#0x608             ;404
00011e  8181              STRH     r1,[r0,#0xc]          ;404
000120  4804              LDR      r0,|L3.308|
000122  490d              LDR      r1,|L3.344|
000124  3036              ADDS     r0,r0,#0x36           ;406
000126  6008              STR      r0,[r1,#0]            ;408  ; uip_appdata
000128  212a              MOVS     r1,#0x2a              ;408
                  |L3.298|
00012a  f8ab1000          STRH     r1,[r11,#0]           ;419
00012e  e8bd9ff0          POP      {r4-r12,pc}
;;;421    /*-----------------------------------------------------------------------------------*/
                          ENDP

000132  0000              DCW      0x0000
                  |L3.308|
                          DCD      uip_buf
                  |L3.312|
                          DCD      uip_ethaddr
                  |L3.316|
                          DCD      uip_len
                  |L3.320|
                          DCD      ||.constdata||
                  |L3.324|
                          DCD      uip_netmask
                  |L3.328|
                          DCD      uip_hostaddr
                  |L3.332|
                          DCD      ||.data||+0x4
                  |L3.336|
                          DCD      uip_draddr
                  |L3.340|
                          DCD      ||.bss||
                  |L3.344|
                          DCD      uip_appdata

                          AREA ||i.uip_arp_timer||, CODE, READONLY, ALIGN=2

                  uip_arp_timer PROC
;;;141    void
;;;142    uip_arp_timer(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;143    {
;;;144      struct arp_entry *tabptr;
;;;145    
;;;146      ++arptime;
000002  480e              LDR      r0,|L4.60|
;;;147      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
;;;148        tabptr = &arp_table[i];
000004  4e0e              LDR      r6,|L4.64|
000006  7881              LDRB     r1,[r0,#2]            ;146  ; arptime
000008  1c49              ADDS     r1,r1,#1              ;146
00000a  b2ca              UXTB     r2,r1                 ;146
00000c  7082              STRB     r2,[r0,#2]            ;146
00000e  2400              MOVS     r4,#0                 ;147
000010  7004              STRB     r4,[r0,#0]            ;147
                  |L4.18|
000012  7803              LDRB     r3,[r0,#0]  ; i
000014  eb030143          ADD      r1,r3,r3,LSL #1
000018  eb060181          ADD      r1,r6,r1,LSL #2
;;;149        if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
00001c  880d              LDRH     r5,[r1,#0]
00001e  884f              LDRH     r7,[r1,#2]
000020  433d              ORRS     r5,r5,r7
000022  d004              BEQ      |L4.46|
;;;150           arptime - tabptr->time >= UIP_ARP_MAXAGE) {
000024  7a8d              LDRB     r5,[r1,#0xa]
000026  1b55              SUBS     r5,r2,r5
000028  2d78              CMP      r5,#0x78
00002a  db00              BLT      |L4.46|
;;;151          memset(tabptr->ipaddr, 0, 4);
00002c  600c              STR      r4,[r1,#0]
                  |L4.46|
00002e  1c5b              ADDS     r3,r3,#1              ;147
000030  b2d9              UXTB     r1,r3                 ;147
000032  7001              STRB     r1,[r0,#0]            ;147
000034  2908              CMP      r1,#8                 ;147
000036  d3ec              BCC      |L4.18|
;;;152        }
;;;153      }
;;;154    
;;;155    }
000038  bdf0              POP      {r4-r7,pc}
;;;156    /*-----------------------------------------------------------------------------------*/
                          ENDP

00003a  0000              DCW      0x0000
                  |L4.60|
                          DCD      ||.data||
                  |L4.64|
                          DCD      ||.bss||

                          AREA ||i.uip_arp_update||, CODE, READONLY, ALIGN=2

                  uip_arp_update PROC
;;;157    static void
;;;158    uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;159    {
000004  4681              MOV      r9,r0
;;;160      register struct arp_entry *tabptr;
;;;161      /* Walk through the ARP mapping table and try to find an entry to
;;;162         update. If none is found, the IP -> MAC address mapping is
;;;163         inserted in the ARP table. */
;;;164      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
000006  482b              LDR      r0,|L5.180|
000008  f04f0800          MOV      r8,#0
;;;165    
;;;166        tabptr = &arp_table[i];
00000c  4a2a              LDR      r2,|L5.184|
00000e  f8808000          STRB     r8,[r0,#0]            ;164
;;;167        /* Only check those entries that are actually in use. */
;;;168        if(tabptr->ipaddr[0] != 0 &&
;;;169           tabptr->ipaddr[1] != 0) {
;;;170    
;;;171          /* Check if the source IP address of the incoming packet matches
;;;172             the IP address in this ARP table entry. */
;;;173          if(ipaddr[0] == tabptr->ipaddr[0] &&
;;;174    	 ipaddr[1] == tabptr->ipaddr[1]) {
;;;175    
;;;176    	/* An old entry found, update this and return. */
;;;177    	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
;;;178    	tabptr->time = arptime;
000012  7883              LDRB     r3,[r0,#2]
                  |L5.20|
000014  7805              LDRB     r5,[r0,#0]            ;166  ; i
000016  eb050445          ADD      r4,r5,r5,LSL #1       ;166
00001a  eb020484          ADD      r4,r2,r4,LSL #2       ;166
00001e  8827              LDRH     r7,[r4,#0]            ;168
000020  b187              CBZ      r7,|L5.68|
000022  8866              LDRH     r6,[r4,#2]            ;169
000024  b176              CBZ      r6,|L5.68|
000026  f8b9c000          LDRH     r12,[r9,#0]           ;173
00002a  45bc              CMP      r12,r7                ;173
00002c  d10a              BNE      |L5.68|
00002e  f8b97002          LDRH     r7,[r9,#2]            ;174
000032  42b7              CMP      r7,r6                 ;174
000034  d106              BNE      |L5.68|
                  |L5.54|
000036  6808              LDR      r0,[r1,#0]            ;177
000038  6060              STR      r0,[r4,#4]            ;177
00003a  8888              LDRH     r0,[r1,#4]            ;177
00003c  8120              STRH     r0,[r4,#8]            ;177
00003e  72a3              STRB     r3,[r4,#0xa]
;;;179    
;;;180    	return;
;;;181          }
;;;182        }
;;;183      }
;;;184    
;;;185      /* If we get here, no existing ARP table entry was found, so we
;;;186         create one. */
;;;187    
;;;188      /* First, we try to find an unused entry in the ARP table. */
;;;189      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
;;;190        tabptr = &arp_table[i];
;;;191        if(tabptr->ipaddr[0] == 0 &&
;;;192           tabptr->ipaddr[1] == 0) {
;;;193          break;
;;;194        }
;;;195      }
;;;196    
;;;197      /* If no unused entry is found, we try to find the oldest entry and
;;;198         throw it away. */
;;;199      if(i == UIP_ARPTAB_SIZE) {
;;;200        tmpage = 0;
;;;201        c = 0;
;;;202        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
;;;203          tabptr = &arp_table[i];
;;;204          if(arptime - tabptr->time > tmpage) {
;;;205    	tmpage = arptime - tabptr->time;
;;;206    	c = i;
;;;207          }
;;;208        }
;;;209        i = c;
;;;210        tabptr = &arp_table[i];
;;;211      }
;;;212    
;;;213      /* Now, i is the ARP table entry which we will fill with the new
;;;214         information. */
;;;215      memcpy(tabptr->ipaddr, ipaddr, 4);
;;;216      memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
;;;217      tabptr->time = arptime;
;;;218    }
000040  e8bd83f0          POP      {r4-r9,pc}
                  |L5.68|
000044  1c6d              ADDS     r5,r5,#1              ;164
000046  b2ec              UXTB     r4,r5                 ;164
000048  7004              STRB     r4,[r0,#0]            ;164
00004a  2c08              CMP      r4,#8                 ;164
00004c  d3e2              BCC      |L5.20|
00004e  4647              MOV      r7,r8                 ;189
000050  f8808000          STRB     r8,[r0,#0]            ;189
                  |L5.84|
000054  7805              LDRB     r5,[r0,#0]            ;190  ; i
000056  eb050445          ADD      r4,r5,r5,LSL #1       ;190
00005a  eb020484          ADD      r4,r2,r4,LSL #2       ;190
00005e  8826              LDRH     r6,[r4,#0]            ;191
000060  b90e              CBNZ     r6,|L5.102|
000062  8866              LDRH     r6,[r4,#2]            ;192
000064  b126              CBZ      r6,|L5.112|
                  |L5.102|
000066  1c6d              ADDS     r5,r5,#1              ;189
000068  b2ed              UXTB     r5,r5                 ;189
00006a  7005              STRB     r5,[r0,#0]            ;189
00006c  2d08              CMP      r5,#8                 ;189
00006e  d3f1              BCC      |L5.84|
                  |L5.112|
000070  b2ed              UXTB     r5,r5                 ;199
000072  2d08              CMP      r5,#8                 ;199
000074  d119              BNE      |L5.170|
000076  70c7              STRB     r7,[r0,#3]            ;200
000078  7047              STRB     r7,[r0,#1]            ;201
00007a  7007              STRB     r7,[r0,#0]            ;202
                  |L5.124|
00007c  7804              LDRB     r4,[r0,#0]            ;203  ; i
00007e  78c7              LDRB     r7,[r0,#3]            ;204  ; tmpage
000080  eb040544          ADD      r5,r4,r4,LSL #1       ;203
000084  eb020585          ADD      r5,r2,r5,LSL #2       ;203
000088  7aae              LDRB     r6,[r5,#0xa]          ;204
00008a  1b9d              SUBS     r5,r3,r6              ;204
00008c  42bd              CMP      r5,r7                 ;204
00008e  dd01              BLE      |L5.148|
000090  70c5              STRB     r5,[r0,#3]            ;205
000092  7044              STRB     r4,[r0,#1]            ;206
                  |L5.148|
000094  1c64              ADDS     r4,r4,#1              ;202
000096  b2e4              UXTB     r4,r4                 ;202
000098  7004              STRB     r4,[r0,#0]            ;202
00009a  2c08              CMP      r4,#8                 ;202
00009c  d3ee              BCC      |L5.124|
00009e  7844              LDRB     r4,[r0,#1]            ;209  ; c
0000a0  7004              STRB     r4,[r0,#0]            ;209
0000a2  eb040044          ADD      r0,r4,r4,LSL #1       ;210
0000a6  eb020480          ADD      r4,r2,r0,LSL #2       ;210
                  |L5.170|
0000aa  f8d90000          LDR      r0,[r9,#0]            ;215
0000ae  6020              STR      r0,[r4,#0]            ;215
0000b0  e7c1              B        |L5.54|
;;;219    /*-----------------------------------------------------------------------------------*/
                          ENDP

0000b2  0000              DCW      0x0000
                  |L5.180|
                          DCD      ||.data||
                  |L5.184|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  arp_table
                          %        96

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  broadcast_ethaddr
000000  ffffffff          DCB      0xff,0xff,0xff,0xff
000004  ffff              DCB      0xff,0xff

                          AREA ||area_number.10||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.10||, ||.constdata||
                  broadcast_ipaddr
000000  ffffffff          DCW      0xffff,0xffff

                          AREA ||.data||, DATA, ALIGN=1

                  i
000000  00                DCB      0x00
                  c
000001  00                DCB      0x00
                  arptime
000002  00                DCB      0x00
                  tmpage
000003  00                DCB      0x00
                  ipaddr
                          DCDU     0x00000000
