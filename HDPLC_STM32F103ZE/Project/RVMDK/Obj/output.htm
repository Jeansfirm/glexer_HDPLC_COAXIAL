<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 561]: Last Updated: Tue Nov 10 16:09:27 2015
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; UipPro &rArr; uip_process &rArr; udp_demo_appcall &rArr; udp_appcall &rArr; run_StartSpeedTest &rArr; String2Hex &rArr; strtoul &rArr; _strtoul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">IsKeyDownDown</a> from button.o(i.IsKeyDownDown) referenced from button.o(i.InitButtonVar)
 <LI><a href="#[52]">IsKeyDownLeft</a> from button.o(i.IsKeyDownLeft) referenced from button.o(i.InitButtonVar)
 <LI><a href="#[54]">IsKeyDownOk</a> from button.o(i.IsKeyDownOk) referenced from button.o(i.InitButtonVar)
 <LI><a href="#[53]">IsKeyDownRight</a> from button.o(i.IsKeyDownRight) referenced from button.o(i.InitButtonVar)
 <LI><a href="#[4e]">IsKeyDownTamper</a> from button.o(i.IsKeyDownTamper) referenced from button.o(i.InitButtonVar)
 <LI><a href="#[50]">IsKeyDownUp</a> from button.o(i.IsKeyDownUp) referenced from button.o(i.InitButtonVar)
 <LI><a href="#[4d]">IsKeyDownUser</a> from button.o(i.IsKeyDownUser) referenced from button.o(i.InitButtonVar)
 <LI><a href="#[4f]">IsKeyDownWakeUp</a> from button.o(i.IsKeyDownWakeUp) referenced from button.o(i.InitButtonVar)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit_ExtMemCtl</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">__backspace</a> from fgetc_b.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[49]">fgetc</a> from usart_printf.o(i.fgetc) referenced from scanf_char_file.o(.text)
 <LI><a href="#[55]">fputc</a> from usart_printf.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4c]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[56]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[da]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[47]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherRx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherRx
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c3]"></a>strcat</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SysGetPhyRate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddress
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetAllMessages
</UL>

<P><STRONG><a name="[b3]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_connection
</UL>

<P><STRONG><a name="[89]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SystemCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SysGetPhyRate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddressSub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_SystemCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_connection
</UL>

<P><STRONG><a name="[c2]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SysGetPhyRate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddressSub
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddress
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetAllMessages
</UL>

<P><STRONG><a name="[5b]"></a>__0scanf</STRONG> (Thumb, 26 bytes, Stack size 56 bytes, __0scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>_scanf_string</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[5d]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_uldivmod</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[4c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>_strtoul</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[5c]"></a>__vfscanf_char_file</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>

<P><STRONG><a name="[57]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>_fgetc$bs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fgetc_b.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__backspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fgetc_b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_chval</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[65]"></a>__vfscanf_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[67]"></a>__vfscanf</STRONG> (Thumb, 818 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>EtherRx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hdplc_struct.o(i.EtherRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EtherRx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[76]"></a>EtherTx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hdplc_struct.o(i.EtherTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EtherTx &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_senddata
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[6f]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
</UL>

<P><STRONG><a name="[6e]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
</UL>

<P><STRONG><a name="[78]"></a>GPIO_Configuration</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, main.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
</UL>

<P><STRONG><a name="[83]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownWakeUp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownUser
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownUp
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownTamper
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownRight
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownOk
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownLeft
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownDown
</UL>

<P><STRONG><a name="[79]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[a0]"></a>GetRunTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.GetRunTime))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>InitButtonVar</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, button.o(i.InitButtonVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitButtonVar
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[7e]"></a>InitNet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.InitNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = InitNet &rArr; tapdev_init &rArr; etherdev_init &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>Initialize</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hdplc_struct.o(i.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SystemCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SysGetPhyRate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_StartSpeedTest
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_StartChannelEstimate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddressSub
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetPhyRate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetCINRMap2To28
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetAllMessages
</UL>

<P><STRONG><a name="[84]"></a>KeyPro</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, button.o(i.KeyPro), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectButton
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ISR
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>PrintfLogo</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usart_printf.o(i.PrintfLogo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PrintfLogo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>PutKey</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, button.o(i.PutKey), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectButton
</UL>

<P><STRONG><a name="[6a]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
</UL>

<P><STRONG><a name="[6b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
</UL>

<P><STRONG><a name="[8f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SetIP1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.SetIP1))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SetIP1 &rArr; tapdev_init &rArr; etherdev_init &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>SetIP2</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.SetIP2))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SetIP2 &rArr; tapdev_init &rArr; etherdev_init &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>String2Hex</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hdplc_struct.o(i.String2Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = String2Hex &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_StartSpeedTest
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_StartChannelEstimate
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>SysTick_ISR</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, systick.o(i.SysTick_ISR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPro
</UL>

<P><STRONG><a name="[7b]"></a>SystemInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[8e]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[8d]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[7c]"></a>USART_Configuration</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, usart_printf.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[ac]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[8c]"></a>USART_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[ad]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[ae]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[90]"></a>UipPro</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, main.o(i.UipPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = UipPro &rArr; uip_process &rArr; udp_demo_appcall &rArr; udp_appcall &rArr; run_StartSpeedTest &rArr; String2Hex &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_timer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e5]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[75]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SystemCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SysGetPhyRate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_StartSpeedTest
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddressSub
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddress
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetAllMessages
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_SystemCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_StartSpeedTest
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_StartChannelEstimate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_GetStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_GetPhyRate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_GetCINRMap2To28
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherTx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherRx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfLogo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[e6]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[e7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9f]"></a>clock_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock-arch.o(i.clock_time))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRunTime
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
</UL>

<P><STRONG><a name="[7f]"></a>dm9k_ReadID</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dm9k_uip.o(i.dm9k_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dm9k_ReadID &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ior
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[a2]"></a>dm9k_hash_table</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dm9k_uip.o(i.dm9k_hash_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm9k_hash_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iow
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_initnic
</UL>

<P><STRONG><a name="[a4]"></a>dm9k_initnic</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dm9k_uip.o(i.dm9k_initnic))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dm9k_initnic &rArr; dm9k_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_udelay
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_phy_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_hash_table
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherdev_init
</UL>

<P><STRONG><a name="[a7]"></a>dm9k_phy_write</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, dm9k_uip.o(i.dm9k_phy_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dm9k_phy_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ior
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_initnic
</UL>

<P><STRONG><a name="[a8]"></a>dm9k_receive_packet</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dm9k_uip.o(i.dm9k_receive_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dm9k_receive_packet &rArr; dm9k_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ior
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
</UL>

<P><STRONG><a name="[a6]"></a>dm9k_reset</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, dm9k_uip.o(i.dm9k_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dm9k_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_receive_packet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_initnic
</UL>

<P><STRONG><a name="[a9]"></a>dm9k_send_packet</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, dm9k_uip.o(i.dm9k_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dm9k_send_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ior
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherdev_send
</UL>

<P><STRONG><a name="[a5]"></a>dm9k_udelay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dm9k_uip.o(i.dm9k_udelay))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_send_packet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_initnic
</UL>

<P><STRONG><a name="[aa]"></a>etherdev_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dm9k_uip.o(i.etherdev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = etherdev_init &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_initnic
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[ab]"></a>etherdev_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dm9k_uip.o(i.etherdev_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = etherdev_send &rArr; dm9k_send_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
</UL>

<P><STRONG><a name="[49]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart_printf.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart_printf.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[af]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SystemCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_StartSpeedTest
</UL>

<P><STRONG><a name="[b4]"></a>hello_world_appcall</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hello-world.o(i.hello_world_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hello_world_appcall &rArr; handle_connection &rArr; psock_readto
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[93]"></a>htons</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uip.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[a1]"></a>ior</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dm9k_uip.o(i.ior))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_send_packet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_receive_packet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_phy_write
</UL>

<P><STRONG><a name="[a3]"></a>iow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dm9k_uip.o(i.iow))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_hash_table
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; UipPro &rArr; uip_process &rArr; udp_demo_appcall &rArr; udp_appcall &rArr; run_StartSpeedTest &rArr; String2Hex &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfLogo
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIP2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIP1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[b7]"></a>print_GetCINRMap2To28</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hdplc_struct.o(i.print_GetCINRMap2To28))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_GetCINRMap2To28 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[b8]"></a>print_GetPhyRate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hdplc_struct.o(i.print_GetPhyRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_GetPhyRate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[b9]"></a>print_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, hdplc_struct.o(i.print_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_GetStatus &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[ba]"></a>print_StartChannelEstimate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hdplc_struct.o(i.print_StartChannelEstimate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = print_StartChannelEstimate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[bb]"></a>print_StartSpeedTest</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hdplc_struct.o(i.print_StartSpeedTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = print_StartSpeedTest &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[bc]"></a>print_SystemCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hdplc_struct.o(i.print_SystemCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = print_SystemCmd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[b5]"></a>psock_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, psock.o(i.psock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello_world_appcall
</UL>

<P><STRONG><a name="[bd]"></a>psock_newdata</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, psock.o(i.psock_newdata))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
</UL>

<P><STRONG><a name="[b2]"></a>psock_readto</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, psock.o(i.psock_readto))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = psock_readto
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_newdata
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_connection
</UL>

<P><STRONG><a name="[b1]"></a>psock_send</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, psock.o(i.psock_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = psock_send &rArr; send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acked
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_connection
</UL>

<P><STRONG><a name="[c0]"></a>run_GetAllMessages</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, hdplc_struct.o(i.run_GetAllMessages))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = run_GetAllMessages &rArr; run_SysGetPhyRate &rArr; Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SysGetPhyRate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[c4]"></a>run_GetCINRMap2To28</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hdplc_struct.o(i.run_GetCINRMap2To28))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = run_GetCINRMap2To28 &rArr; Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[c5]"></a>run_GetPhyRate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hdplc_struct.o(i.run_GetPhyRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = run_GetPhyRate &rArr; Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[c6]"></a>run_GetStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hdplc_struct.o(i.run_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = run_GetStatus &rArr; Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[c7]"></a>run_SetMacAddress</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, hdplc_struct.o(i.run_SetMacAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = run_SetMacAddress &rArr; run_SetMacAddressSub &rArr; Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddressSub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[c8]"></a>run_SetMacAddressSub</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hdplc_struct.o(i.run_SetMacAddressSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = run_SetMacAddressSub &rArr; Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddress
</UL>

<P><STRONG><a name="[c9]"></a>run_StartChannelEstimate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hdplc_struct.o(i.run_StartChannelEstimate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = run_StartChannelEstimate &rArr; String2Hex &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[ca]"></a>run_StartSpeedTest</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, hdplc_struct.o(i.run_StartSpeedTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = run_StartSpeedTest &rArr; String2Hex &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[c1]"></a>run_SysGetPhyRate</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, hdplc_struct.o(i.run_SysGetPhyRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = run_SysGetPhyRate &rArr; Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetAllMessages
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[cb]"></a>run_SystemCmd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hdplc_struct.o(i.run_SystemCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = run_SystemCmd &rArr; Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[80]"></a>tapdev_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tapdev.o(i.tapdev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tapdev_init &rArr; etherdev_init &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherdev_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIP2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIP1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[92]"></a>tapdev_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tapdev.o(i.tapdev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tapdev_read &rArr; dm9k_receive_packet &rArr; dm9k_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_receive_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[97]"></a>tapdev_send</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tapdev.o(i.tapdev_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tapdev_send &rArr; etherdev_send &rArr; dm9k_send_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherdev_send
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[98]"></a>timer_expired</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[99]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.timer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[91]"></a>timer_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[cd]"></a>udp_appcall</STRONG> (Thumb, 1626 bytes, Stack size 32 bytes, udp_demo.o(i.udp_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = udp_appcall &rArr; run_StartSpeedTest &rArr; String2Hex &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SystemCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SysGetPhyRate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_StartSpeedTest
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_StartChannelEstimate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_SetMacAddress
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetPhyRate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetCINRMap2To28
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_GetAllMessages
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_SystemCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_StartSpeedTest
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_StartChannelEstimate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_GetStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_GetPhyRate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_GetCINRMap2To28
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherTx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherRx
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_demo_appcall
</UL>

<P><STRONG><a name="[ce]"></a>udp_demo_appcall</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp_demo.o(i.udp_demo_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = udp_demo_appcall &rArr; udp_appcall &rArr; run_StartSpeedTest &rArr; String2Hex &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[77]"></a>udp_senddata</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udp_demo.o(i.udp_senddata))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherTx
</UL>

<P><STRONG><a name="[d0]"></a>uip_add32</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uip.o(i.uip_add32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[96]"></a>uip_arp_arpin</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, uip_arp.o(i.uip_arp_arpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_arp_arpin &rArr; uip_arp_update
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[95]"></a>uip_arp_out</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, uip_arp.o(i.uip_arp_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uip_arp_out
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[9a]"></a>uip_arp_timer</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, uip_arp.o(i.uip_arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uip_arp_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[81]"></a>uip_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uip.o(i.uip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIP2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIP1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNet
</UL>

<P><STRONG><a name="[d2]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip.o(i.uip_ipchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[d4]"></a>uip_log</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hello-world.o(i.uip_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uip_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[94]"></a>uip_process</STRONG> (Thumb, 2940 bytes, Stack size 40 bytes, uip.o(i.uip_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = uip_process &rArr; udp_demo_appcall &rArr; udp_appcall &rArr; run_StartSpeedTest &rArr; String2Hex &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_demo_appcall
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello_world_appcall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UipPro
</UL>

<P><STRONG><a name="[cc]"></a>uip_send</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uip.o(i.uip_send))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_senddata
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[d6]"></a>uip_tcpchksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip.o(i.uip_tcpchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[b6]"></a>uip_udp_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, udp_demo.o(i.uip_udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_udp_init &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>uip_udp_new</STRONG> (Thumb, 154 bytes, Stack size 28 bytes, uip.o(i.uip_udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_init
</UL>

<P><STRONG><a name="[d5]"></a>uip_udpchksum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip.o(i.uip_udpchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7a]"></a>InitBoard</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.InitBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitBoard &rArr; USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtonVar
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>DetectButton</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, button.o(i.DetectButton), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPro
</UL>

<P><STRONG><a name="[51]"></a>IsKeyDownDown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button.o(i.IsKeyDownDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDownDown
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.InitButtonVar)
</UL>
<P><STRONG><a name="[52]"></a>IsKeyDownLeft</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, button.o(i.IsKeyDownLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDownLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.InitButtonVar)
</UL>
<P><STRONG><a name="[54]"></a>IsKeyDownOk</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button.o(i.IsKeyDownOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDownOk
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.InitButtonVar)
</UL>
<P><STRONG><a name="[53]"></a>IsKeyDownRight</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, button.o(i.IsKeyDownRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDownRight
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.InitButtonVar)
</UL>
<P><STRONG><a name="[4e]"></a>IsKeyDownTamper</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, button.o(i.IsKeyDownTamper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDownTamper
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.InitButtonVar)
</UL>
<P><STRONG><a name="[50]"></a>IsKeyDownUp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, button.o(i.IsKeyDownUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDownUp
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.InitButtonVar)
</UL>
<P><STRONG><a name="[4d]"></a>IsKeyDownUser</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, button.o(i.IsKeyDownUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDownUser
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.InitButtonVar)
</UL>
<P><STRONG><a name="[4f]"></a>IsKeyDownWakeUp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, button.o(i.IsKeyDownWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsKeyDownWakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.InitButtonVar)
</UL>
<P><STRONG><a name="[8b]"></a>SetSysClockTo72</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[be]"></a>data_acked</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, psock.o(i.data_acked))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
</UL>

<P><STRONG><a name="[bf]"></a>send_data</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, psock.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
</UL>

<P><STRONG><a name="[d3]"></a>chksum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip.o(i.chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[cf]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uip.o(i.uip_add_rcv_nxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uip_add_rcv_nxt &rArr; uip_add32
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[d7]"></a>upper_layer_chksum</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uip.o(i.upper_layer_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[d1]"></a>uip_arp_update</STRONG> (Thumb, 178 bytes, Stack size 28 bytes, uip_arp.o(i.uip_arp_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
</UL>

<P><STRONG><a name="[69]"></a>DM9K_CtrlLinesConfig</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, dm9k_uip.o(i.DM9K_CtrlLinesConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DM9K_CtrlLinesConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherdev_init
</UL>

<P><STRONG><a name="[6d]"></a>DM9K_FSMCConfig</STRONG> (Thumb, 76 bytes, Stack size 88 bytes, dm9k_uip.o(i.DM9K_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etherdev_init
</UL>

<P><STRONG><a name="[b0]"></a>handle_connection</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, hello-world.o(i.handle_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = handle_connection &rArr; psock_readto
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psock_readto
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello_world_appcall
</UL>

<P><STRONG><a name="[9c]"></a>_printf_core</STRONG> (Thumb, 1064 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[9e]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
