; generated by ARM C/C++ Compiler, 4.1 [Build 561]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\main.o --depend=.\Obj\main.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_DM9000 -I..\..\Libraries\uIP-1.0\apps\hello-world -ID:\Keil4\ARM\INC -ID:\Keil4\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\Source\src\main.c]
                          THUMB

                          AREA ||i.InitNet||, CODE, READONLY, ALIGN=2

                  InitNet PROC
;;;258    */
;;;259    void InitNet(void)
000000  b510              PUSH     {r4,lr}
;;;260    {
;;;261    	uip_ipaddr_t ipaddr;
;;;262    
;;;263    	/* 检测网卡芯片 */
;;;264    	{
;;;265    		uint32_t vid;
;;;266    
;;;267    		vid = dm9k_ReadID();
000002  f7fffffe          BL       dm9k_ReadID
;;;268    		if (vid == DM9000A_ID_OK)
;;;269    		{
;;;270    			//printf("DM9000AE Detect Ok, vid&pid = %08X\n\r", vid);
;;;271    		}
;;;272    		else
;;;273    		{
;;;274    			//printf("DM9000AE Detect Failed, vid&pid = %08X, Expected = %08X\n\r", vid, DM9000A_ID_OK);
;;;275    		}
;;;276    	}
;;;277    
;;;278    	tapdev_init();
000006  f7fffffe          BL       tapdev_init
;;;279    
;;;280    	//printf("uip_init\n\r");
;;;281    	uip_init();
00000a  f7fffffe          BL       uip_init
;;;282    
;;;283    	//printf("uip ip address : 192,168,20,11\n\r");
;;;284    	uip_ipaddr(ipaddr, 192,168,20,11);
;;;285    	uip_sethostaddr(ipaddr);
00000e  4909              LDR      r1,|L1.52|
000010  f64a00c0          MOV      r0,#0xa8c0            ;284
000014  f6403214          MOV      r2,#0xb14             ;284
000018  8008              STRH     r0,[r1,#0]
00001a  804a              STRH     r2,[r1,#2]
;;;286    
;;;287    	//printf("uip route address : 192,168,20,1\n\r");
;;;288    	uip_ipaddr(ipaddr, 192,168,20,1);
;;;289    	uip_setdraddr(ipaddr);
00001c  4906              LDR      r1,|L1.56|
00001e  f44f728a          MOV      r2,#0x114             ;288
000022  8008              STRH     r0,[r1,#0]
000024  804a              STRH     r2,[r1,#2]
;;;290    
;;;291    	//printf("uip net mask : 255,255,255,0\n\r");
;;;292    	uip_ipaddr(ipaddr, 255,255,255,0);
;;;293    	uip_setnetmask(ipaddr);
000026  4805              LDR      r0,|L1.60|
000028  f64f72ff          MOV      r2,#0xffff            ;292
00002c  21ff              MOVS     r1,#0xff              ;292
00002e  8002              STRH     r2,[r0,#0]
000030  8041              STRH     r1,[r0,#2]
;;;294    }
000032  bd10              POP      {r4,pc}
;;;295    
                          ENDP

                  |L1.52|
                          DCD      uip_hostaddr
                  |L1.56|
                          DCD      uip_draddr
                  |L1.60|
                          DCD      uip_netmask

                          AREA ||i.SetIP1||, CODE, READONLY, ALIGN=2

                  SetIP1 PROC
;;;296    
;;;297    void SetIP1(void)
000000  b510              PUSH     {r4,lr}
;;;298    {
;;;299    	uip_ipaddr_t ipaddr;
;;;300    
;;;301    	tapdev_init();
000002  f7fffffe          BL       tapdev_init
;;;302    	uip_init();
000006  f7fffffe          BL       uip_init
;;;303    
;;;304    	//printf("uip ip address : 192,168,20,11\n\r");
;;;305    	uip_ipaddr(ipaddr, 192,168,20,11);
;;;306    	uip_sethostaddr(ipaddr);
00000a  4909              LDR      r1,|L2.48|
00000c  f64a00c0          MOV      r0,#0xa8c0            ;305
000010  f6403214          MOV      r2,#0xb14             ;305
000014  8008              STRH     r0,[r1,#0]
000016  804a              STRH     r2,[r1,#2]
;;;307    
;;;308    	//printf("uip route address : 192,168,20,1\n\r");
;;;309    	uip_ipaddr(ipaddr, 192,168,20,1);
;;;310    	uip_setdraddr(ipaddr);
000018  4906              LDR      r1,|L2.52|
00001a  f44f728a          MOV      r2,#0x114             ;309
00001e  8008              STRH     r0,[r1,#0]
000020  804a              STRH     r2,[r1,#2]
;;;311    
;;;312    	//printf("uip net mask : 255,255,255,0\n\r");
;;;313    	uip_ipaddr(ipaddr, 255,255,255,0);
;;;314    	uip_setnetmask(ipaddr);
000022  4805              LDR      r0,|L2.56|
000024  f64f72ff          MOV      r2,#0xffff            ;313
000028  21ff              MOVS     r1,#0xff              ;313
00002a  8002              STRH     r2,[r0,#0]
00002c  8041              STRH     r1,[r0,#2]
;;;315    }
00002e  bd10              POP      {r4,pc}
;;;316    
                          ENDP

                  |L2.48|
                          DCD      uip_hostaddr
                  |L2.52|
                          DCD      uip_draddr
                  |L2.56|
                          DCD      uip_netmask

                          AREA ||i.SetIP2||, CODE, READONLY, ALIGN=2

                  SetIP2 PROC
;;;316    
;;;317    void SetIP2(void)
000000  b510              PUSH     {r4,lr}
;;;318    {
;;;319    	uip_ipaddr_t ipaddr;
;;;320    
;;;321    	tapdev_init();
000002  f7fffffe          BL       tapdev_init
;;;322    	uip_init();
000006  f7fffffe          BL       uip_init
;;;323    
;;;324    	//printf("uip ip address : 192,168,20,11\n\r");
;;;325    	uip_ipaddr(ipaddr, 192,168,20,12);
;;;326    	uip_sethostaddr(ipaddr);
00000a  4909              LDR      r1,|L3.48|
00000c  f64a00c0          MOV      r0,#0xa8c0            ;325
000010  f6404214          MOV      r2,#0xc14             ;325
000014  8008              STRH     r0,[r1,#0]
000016  804a              STRH     r2,[r1,#2]
;;;327    
;;;328    	//printf("uip route address : 192,168,20,1\n\r");
;;;329    	uip_ipaddr(ipaddr, 192,168,20,1);
;;;330    	uip_setdraddr(ipaddr);
000018  4906              LDR      r1,|L3.52|
00001a  f44f728a          MOV      r2,#0x114             ;329
00001e  8008              STRH     r0,[r1,#0]
000020  804a              STRH     r2,[r1,#2]
;;;331    
;;;332    	//printf("uip net mask : 255,255,255,0\n\r");
;;;333    	uip_ipaddr(ipaddr, 255,255,255,0);
;;;334    	uip_setnetmask(ipaddr);
000022  4805              LDR      r0,|L3.56|
000024  f64f72ff          MOV      r2,#0xffff            ;333
000028  21ff              MOVS     r1,#0xff              ;333
00002a  8002              STRH     r2,[r0,#0]
00002c  8041              STRH     r1,[r0,#2]
;;;335    }
00002e  bd10              POP      {r4,pc}
;;;336    
                          ENDP

                  |L3.48|
                          DCD      uip_hostaddr
                  |L3.52|
                          DCD      uip_draddr
                  |L3.56|
                          DCD      uip_netmask

                          AREA ||i.UipPro||, CODE, READONLY, ALIGN=2

                  UipPro PROC
;;;155    */
;;;156    void UipPro(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;157    {
;;;158    	uint8_t i;
;;;159    	static struct timer periodic_timer, arp_timer;
;;;160    	static char timer_ok = 0;	/* armfly */
;;;161    
;;;162    	/* 创建2个定时器，只用执行1次 */
;;;163    	if (timer_ok == 0)
000004  483d              LDR      r0,|L4.252|
000006  7801              LDRB     r1,[r0,#0]  ; timer_ok
000008  b959              CBNZ     r1,|L4.34|
;;;164    	{
;;;165    		timer_ok = 1;
00000a  2101              MOVS     r1,#1
00000c  7001              STRB     r1,[r0,#0]
;;;166    		timer_set(&periodic_timer, CLOCK_SECOND / 2);  /* 创建1个0.5秒的定时器 */
00000e  2132              MOVS     r1,#0x32
000010  3018              ADDS     r0,r0,#0x18
000012  f7fffffe          BL       timer_set
;;;167    		timer_set(&arp_timer, CLOCK_SECOND * 10);	   /* 创建1个10秒的定时器 */
000016  4839              LDR      r0,|L4.252|
000018  f44f717a          MOV      r1,#0x3e8
00001c  3020              ADDS     r0,r0,#0x20
00001e  f7fffffe          BL       timer_set
                  |L4.34|
;;;168    	}
;;;169    
;;;170    	/*
;;;171    		从网络设备读取一个IP包,返回数据长度 (非阻塞)
;;;172    		这个地方没有使用DM9000AEP的中断功能，采用的是查询方式
;;;173    	*/
;;;174    	uip_len = tapdev_read();	/* uip_len 是在uip中定义的全局变量 */
000022  f7fffffe          BL       tapdev_read
000026  4c36              LDR      r4,|L4.256|
000028  8020              STRH     r0,[r4,#0]
;;;175    	if(uip_len > 0)
00002a  b300              CBZ      r0,|L4.110|
;;;176    	{
;;;177    		/* 处理IP数据包(只有校验通过的IP包才会被接收) */
;;;178    		if(BUF->type == htons(UIP_ETHTYPE_IP))
00002c  f44f6000          MOV      r0,#0x800
000030  f7fffffe          BL       htons
000034  4d33              LDR      r5,|L4.260|
000036  89a9              LDRH     r1,[r5,#0xc]  ; uip_buf
000038  4288              CMP      r0,r1
00003a  d108              BNE      |L4.78|
;;;179    		{
;;;180    			uip_arp_ipin();
;;;181    			uip_input();
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       uip_process
;;;182    			/*
;;;183    				当上面的函数执行后，如果需要发送数据，则全局变量 uip_len > 0
;;;184    				需要发送的数据在uip_buf, 长度是uip_len  (这是2个全局变量)
;;;185    			*/
;;;186    			if (uip_len > 0)
000042  8820              LDRH     r0,[r4,#0]  ; uip_len
000044  2800              CMP      r0,#0
000046  d057              BEQ      |L4.248|
;;;187    			{
;;;188    				uip_arp_out();
000048  f7fffffe          BL       uip_arp_out
;;;189    				tapdev_send();
00004c  e00b              B        |L4.102|
                  |L4.78|
;;;190    			}
;;;191    		}
;;;192    		/* 处理arp报文 */
;;;193    		else if (BUF->type == htons(UIP_ETHTYPE_ARP))
00004e  f6400006          MOV      r0,#0x806
000052  f7fffffe          BL       htons
000056  89a9              LDRH     r1,[r5,#0xc]  ; uip_buf
000058  4288              CMP      r0,r1
00005a  d14d              BNE      |L4.248|
;;;194    		{
;;;195    			uip_arp_arpin();
00005c  f7fffffe          BL       uip_arp_arpin
;;;196    			/*
;;;197    				当上面的函数执行后，如果需要发送数据，则全局变量 uip_len > 0
;;;198    				需要发送的数据在uip_buf, 长度是uip_len  (这是2个全局变量)
;;;199    			*/
;;;200    			if (uip_len > 0)
000060  8820              LDRH     r0,[r4,#0]  ; uip_len
000062  2800              CMP      r0,#0
000064  d048              BEQ      |L4.248|
                  |L4.102|
;;;201    			{
;;;202    				tapdev_send();
000066  e8bd41f0          POP      {r4-r8,lr}
00006a  f7ffbffe          B.W      tapdev_send
                  |L4.110|
;;;203    			}
;;;204    		}
;;;205    	}
;;;206    	else if(timer_expired(&periodic_timer))	/* 0.5秒定时器超时 */
00006e  4823              LDR      r0,|L4.252|
000070  3018              ADDS     r0,r0,#0x18
000072  f7fffffe          BL       timer_expired
000076  2800              CMP      r0,#0
000078  d03e              BEQ      |L4.248|
;;;207    	{
;;;208    		timer_reset(&periodic_timer);	/* 复位0.5秒定时器 */
00007a  4820              LDR      r0,|L4.252|
00007c  3018              ADDS     r0,r0,#0x18
00007e  f7fffffe          BL       timer_reset
;;;209    
;;;210    		/* 轮流处理每个TCP连接, UIP_CONNS缺省是10个 */
;;;211    		for(i = 0; i < UIP_CONNS; i++)
;;;212    		{
;;;213    			uip_periodic(i);	/* 处理TCP通信事件 */
000082  4e21              LDR      r6,|L4.264|
000084  4f21              LDR      r7,|L4.268|
000086  2500              MOVS     r5,#0                 ;211
                  |L4.136|
000088  eb050045          ADD      r0,r5,r5,LSL #1
00008c  ebc01045          RSB      r0,r0,r5,LSL #5
000090  eb060080          ADD      r0,r6,r0,LSL #2
000094  6038              STR      r0,[r7,#0]  ; uip_conn
000096  2002              MOVS     r0,#2
000098  f7fffffe          BL       uip_process
;;;214    			/*
;;;215    				当上面的函数执行后，如果需要发送数据，则全局变量 uip_len > 0
;;;216    				需要发送的数据在uip_buf, 长度是uip_len  (这是2个全局变量)
;;;217    			*/
;;;218    			if(uip_len > 0)
00009c  8820              LDRH     r0,[r4,#0]  ; uip_len
00009e  b118              CBZ      r0,|L4.168|
;;;219    			{
;;;220    				uip_arp_out();
0000a0  f7fffffe          BL       uip_arp_out
;;;221    				tapdev_send();
0000a4  f7fffffe          BL       tapdev_send
                  |L4.168|
0000a8  1c6d              ADDS     r5,r5,#1              ;211
0000aa  b2ed              UXTB     r5,r5                 ;211
0000ac  2d28              CMP      r5,#0x28              ;211
0000ae  d3eb              BCC      |L4.136|
;;;222    			}
;;;223    		}
;;;224    
;;;225    	#if UIP_UDP
;;;226    		/* 轮流处理每个UDP连接, UIP_UDP_CONNS缺省是10个 */
;;;227    		for(i = 0; i < UIP_UDP_CONNS; i++)
;;;228    		{
;;;229    			uip_udp_periodic(i);	/*处理UDP通信事件 */
0000b0  4e17              LDR      r6,|L4.272|
0000b2  4f18              LDR      r7,|L4.276|
0000b4  2500              MOVS     r5,#0                 ;227
0000b6  bf00              NOP      
                  |L4.184|
0000b8  eb050045          ADD      r0,r5,r5,LSL #1
0000bc  eb0600c0          ADD      r0,r6,r0,LSL #3
0000c0  6038              STR      r0,[r7,#0]  ; uip_udp_conn
0000c2  2005              MOVS     r0,#5
0000c4  f7fffffe          BL       uip_process
;;;230    			/* If the above function invocation resulted in data that
;;;231    			should be sent out on the network, the global variable
;;;232    			uip_len is set to a value > 0. */
;;;233    			if(uip_len > 0)
0000c8  8820              LDRH     r0,[r4,#0]  ; uip_len
0000ca  b118              CBZ      r0,|L4.212|
;;;234    			{
;;;235    			uip_arp_out();
0000cc  f7fffffe          BL       uip_arp_out
;;;236    			tapdev_send();
0000d0  f7fffffe          BL       tapdev_send
                  |L4.212|
0000d4  1c6d              ADDS     r5,r5,#1              ;227
0000d6  b2ed              UXTB     r5,r5                 ;227
0000d8  2d0a              CMP      r5,#0xa               ;227
0000da  d3ed              BCC      |L4.184|
;;;237    			}
;;;238    		}
;;;239    	#endif /* UIP_UDP */
;;;240    
;;;241    		/* 每隔10秒调用1次ARP定时器函数 */
;;;242    		if (timer_expired(&arp_timer))
0000dc  4807              LDR      r0,|L4.252|
0000de  3020              ADDS     r0,r0,#0x20
0000e0  f7fffffe          BL       timer_expired
0000e4  2800              CMP      r0,#0
0000e6  d007              BEQ      |L4.248|
;;;243    		{
;;;244    			timer_reset(&arp_timer);
0000e8  4804              LDR      r0,|L4.252|
0000ea  3020              ADDS     r0,r0,#0x20
0000ec  f7fffffe          BL       timer_reset
;;;245    			uip_arp_timer();
0000f0  e8bd41f0          POP      {r4-r8,lr}
0000f4  f7ffbffe          B.W      uip_arp_timer
                  |L4.248|
;;;246    		}
;;;247    	}
;;;248    }
0000f8  e8bd81f0          POP      {r4-r8,pc}
;;;249    
                          ENDP

                  |L4.252|
                          DCD      ||.data||
                  |L4.256|
                          DCD      uip_len
                  |L4.260|
                          DCD      uip_buf
                  |L4.264|
                          DCD      uip_conns
                  |L4.268|
                          DCD      uip_conn
                  |L4.272|
                          DCD      uip_udp_conns
                  |L4.276|
                          DCD      uip_udp_conn

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_string
                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  main PROC
;;;70     
;;;71     int main(void)
000000  f7fffffe          BL       SystemInit
000004  f7fffffe          BL       USART_Configuration
000008  4838              LDR      r0,|L5.236|
00000a  f44f717a          MOV      r1,#0x3e8
00000e  2500              MOVS     r5,#0
000010  6800              LDR      r0,[r0,#0]  ; SystemFrequency
000012  fbb0f0f1          UDIV     r0,r0,r1
000016  f1b07f80          CMP      r0,#0x1000000
00001a  d20c              BCS      |L5.54|
00001c  f020417f          BIC      r1,r0,#0xff000000
000020  f04f20e0          MOV      r0,#0xe000e000
000024  1e49              SUBS     r1,r1,#1
000026  6141              STR      r1,[r0,#0x14]
000028  4a31              LDR      r2,|L5.240|
00002a  21f0              MOVS     r1,#0xf0
00002c  7011              STRB     r1,[r2,#0]
00002e  6185              STR      r5,[r0,#0x18]
000030  f04f0107          MOV      r1,#7
000034  6101              STR      r1,[r0,#0x10]
                  |L5.54|
000036  a12f              ADR      r1,|L5.244|
000038  a031              ADR      r0,|L5.256|
00003a  f7fffffe          BL       PrintfLogo
;;;72     {  
;;;73     
;;;74     	InitBoard();	/* 为了是main函数看起来更简洁些，我们将初始化的代码封装到这个函数 */
;;;75     	DispLogo();		/* 显示例程Logo */
;;;76     
;;;77     	InitNet();		/* 初始化网络设备以及UIP协议栈，配置IP地址 */
00003e  f7fffffe          BL       InitNet
;;;78     
;;;79     	/* 创建一个TCP监听端口，端口号为1000 */
;;;80     	//uip_listen(HTONS(1000));
;;;81     
;;;82     	printf("\n\rBuilding UDP connectiong to 192.168.20.156...\n\n\r");
000042  a034              ADR      r0,|L5.276|
000044  f7fffffe          BL       __2printf
;;;83     
;;;84     	while(1)
;;;85     	{
;;;86     		 //InitNet();
;;;87     		 if(i_ip==0)
000048  4c3f              LDR      r4,|L5.328|
;;;88     		 {
;;;89     		 	SetIP1();
;;;90     			i_ip=1;
00004a  2601              MOVS     r6,#1
                  |L5.76|
00004c  6960              LDR      r0,[r4,#0x14]         ;87  ; i_ip
00004e  b140              CBZ      r0,|L5.98|
;;;91     		 }
;;;92     		 else
;;;93     		 {
;;;94     		 	SetIP2();
000050  f7fffffe          BL       SetIP2
;;;95     			i_ip=0;
000054  f8c45014          STR.W    r5,[r4,#0x14]
                  |L5.88|
;;;96     		 }
;;;97     
;;;98     		uip_udp_init();
000058  f7fffffe          BL       uip_udp_init
;;;99     
;;;100    		if(circle_flag==0)
00005c  68e0              LDR      r0,[r4,#0xc]  ; circle_flag
00005e  b120              CBZ      r0,|L5.106|
000060  e03e              B        |L5.224|
                  |L5.98|
000062  f7fffffe          BL       SetIP1
000066  6166              STR      r6,[r4,#0x14]         ;90  ; i_ip
000068  e7f6              B        |L5.88|
                  |L5.106|
;;;101    		{
;;;102    		//display main menu
;;;103    		printf("\t\t<--Main Menu-->\t\t\n\n\r");
00006a  a038              ADR      r0,|L5.332|
00006c  f7fffffe          BL       __2printf
;;;104    		printf(" 1.	Get Status\n\r");
000070  a03c              ADR      r0,|L5.356|
000072  f7fffffe          BL       __2printf
;;;105    		printf(" 2.	Start SpeedTest\n\r");
000076  a040              ADR      r0,|L5.376|
000078  f7fffffe          BL       __2printf
;;;106    		printf(" 3.	Get SpeedTestStatus\n\r");
00007c  a044              ADR      r0,|L5.400|
00007e  f7fffffe          BL       __2printf
;;;107    		printf(" 4.	Get PhyRate\n\r");
000082  a04a              ADR      r0,|L5.428|
000084  f7fffffe          BL       __2printf
;;;108    		printf(" 5.	System Command\n\r");
000088  a04d              ADR      r0,|L5.448|
00008a  f7fffffe          BL       __2printf
;;;109    		printf(" 6.	System GetPhyRate\n\r");
00008e  a052              ADR      r0,|L5.472|
000090  f7fffffe          BL       __2printf
;;;110    		printf(" 7.	Get All Messages\n\r");
000094  a056              ADR      r0,|L5.496|
000096  f7fffffe          BL       __2printf
;;;111    		printf(" 8.	Set Mac Address\n\r");
00009a  a05b              ADR      r0,|L5.520|
00009c  f7fffffe          BL       __2printf
;;;112    		printf(" 9.	Start ChannelEstimate\n\r");
0000a0  a05f              ADR      r0,|L5.544|
0000a2  f7fffffe          BL       __2printf
;;;113    		printf(" a.	Get CINR Map\n\r");
0000a6  a065              ADR      r0,|L5.572|
0000a8  f7fffffe          BL       __2printf
;;;114    		printf(" 0.	Exit\n\r");
0000ac  a068              ADR      r0,|L5.592|
0000ae  f7fffffe          BL       __2printf
;;;115    		printf("\n\r	Input-->");
0000b2  a06a              ADR      r0,|L5.604|
0000b4  f7fffffe          BL       __2printf
;;;116    
;;;117    		//c_choice=getc(stdin);
;;;118    		scanf("%s",inStr); 
0000b8  496b              LDR      r1,|L5.616|
0000ba  a06c              ADR      r0,|L5.620|
0000bc  f7fffffe          BL       __0scanf
;;;119    		c_choice=(unsigned char)inStr[0];	 		
0000c0  4869              LDR      r0,|L5.616|
0000c2  7801              LDRB     r1,[r0,#0]  ; inStr
0000c4  7061              STRB     r1,[r4,#1]
;;;120    
;;;121    		if(c_choice=='7'||c_choice=='8')
0000c6  2937              CMP      r1,#0x37
0000c8  d001              BEQ      |L5.206|
0000ca  2938              CMP      r1,#0x38
0000cc  d101              BNE      |L5.210|
                  |L5.206|
0000ce  e9c46503          STRD     r6,r5,[r4,#0xc]
                  |L5.210|
;;;122    		{
;;;123    			circle_flag=1;
;;;124    			circle_state=0;
;;;125    		}
;;;126    
;;;127    		send_flag=1;
;;;128    		rec_flag=0;
;;;129    		uip_len=0; 
0000d2  4867              LDR      r0,|L5.624|
0000d4  e9c46501          STRD     r6,r5,[r4,#4]
0000d8  8005              STRH     r5,[r0,#0]
;;;130    		printf(" %c\n\n\r",c_choice);
0000da  a066              ADR      r0,|L5.628|
0000dc  f7fffffe          BL       __2printf
                  |L5.224|
;;;131    
;;;132    		}
;;;133    
;;;134    		while (1)
;;;135    		{
;;;136    			UipPro();		/* 处理uip事件，必须插入到用户程序的循环体中 */
0000e0  f7fffffe          BL       UipPro
;;;137    
;;;138    			//uip_udp_init();	
;;;139    
;;;140    			if(rec_flag)break;		 
0000e4  68a0              LDR      r0,[r4,#8]  ; rec_flag
0000e6  2800              CMP      r0,#0
0000e8  d0fa              BEQ      |L5.224|
0000ea  e7af              B        |L5.76|
;;;141    			
;;;142    		}	
;;;143    
;;;144    
;;;145    	}
;;;146    }
;;;147    
                          ENDP

                  |L5.236|
                          DCD      SystemFrequency
                  |L5.240|
                          DCD      0xe000ed23
                  |L5.244|
0000f4  32303135          DCB      "2015-10-14",0
0000f8  2d31302d
0000fc  313400  
0000ff  00                DCB      0
                  |L5.256|
000100  6864706c          DCB      "hdplc_testProgram",0
000104  635f7465
000108  73745072
00010c  6f677261
000110  6d00    
000112  00                DCB      0
000113  00                DCB      0
                  |L5.276|
000114  0a0d4275          DCB      "\n\rBuilding UDP connectiong to 192.168.20.156...\n\n\r"
000118  696c6469
00011c  6e672055
000120  44502063
000124  6f6e6e65
000128  6374696f
00012c  6e672074
000130  6f203139
000134  322e3136
000138  382e3230
00013c  2e313536
000140  2e2e2e0a
000144  0a0d    
000146  00                DCB      0
000147  00                DCB      0
                  |L5.328|
                          DCD      ||.data||
                  |L5.332|
00014c  09093c2d          DCB      "\t\t<--Main Menu-->\t\t\n\n\r",0
000150  2d4d6169
000154  6e204d65
000158  6e752d2d
00015c  3e09090a
000160  0a0d00  
000163  00                DCB      0
                  |L5.356|
000164  20312e09          DCB      " 1.\tGet Status\n\r",0
000168  47657420
00016c  53746174
000170  75730a0d
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
                  |L5.376|
000178  20322e09          DCB      " 2.\tStart SpeedTest\n\r",0
00017c  53746172
000180  74205370
000184  65656454
000188  6573740a
00018c  0d00    
00018e  00                DCB      0
00018f  00                DCB      0
                  |L5.400|
000190  20332e09          DCB      " 3.\tGet SpeedTestStatus\n\r",0
000194  47657420
000198  53706565
00019c  64546573
0001a0  74537461
0001a4  7475730a
0001a8  0d00    
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L5.428|
0001ac  20342e09          DCB      " 4.\tGet PhyRate\n\r",0
0001b0  47657420
0001b4  50687952
0001b8  6174650a
0001bc  0d00    
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L5.448|
0001c0  20352e09          DCB      " 5.\tSystem Command\n\r",0
0001c4  53797374
0001c8  656d2043
0001cc  6f6d6d61
0001d0  6e640a0d
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L5.472|
0001d8  20362e09          DCB      " 6.\tSystem GetPhyRate\n\r",0
0001dc  53797374
0001e0  656d2047
0001e4  65745068
0001e8  79526174
0001ec  650a0d00
                  |L5.496|
0001f0  20372e09          DCB      " 7.\tGet All Messages\n\r",0
0001f4  47657420
0001f8  416c6c20
0001fc  4d657373
000200  61676573
000204  0a0d00  
000207  00                DCB      0
                  |L5.520|
000208  20382e09          DCB      " 8.\tSet Mac Address\n\r",0
00020c  53657420
000210  4d616320
000214  41646472
000218  6573730a
00021c  0d00    
00021e  00                DCB      0
00021f  00                DCB      0
                  |L5.544|
000220  20392e09          DCB      " 9.\tStart ChannelEstimate\n\r",0
000224  53746172
000228  74204368
00022c  616e6e65
000230  6c457374
000234  696d6174
000238  650a0d00
                  |L5.572|
00023c  20612e09          DCB      " a.\tGet CINR Map\n\r",0
000240  47657420
000244  43494e52
000248  204d6170
00024c  0a0d00  
00024f  00                DCB      0
                  |L5.592|
000250  20302e09          DCB      " 0.\tExit\n\r",0
000254  45786974
000258  0a0d00  
00025b  00                DCB      0
                  |L5.604|
00025c  0a0d0949          DCB      "\n\r\tInput-->",0
000260  6e707574
000264  2d2d3e00
                  |L5.616|
                          DCD      ||.bss||
                  |L5.620|
00026c  257300            DCB      "%s",0
00026f  00                DCB      0
                  |L5.624|
                          DCD      uip_len
                  |L5.628|
000274  2025630a          DCB      " %c\n\n\r",0
000278  0a0d00  
00027b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  inStr
                          %        100

                          AREA ||.data||, DATA, ALIGN=2

                  timer_ok
000000  00                DCB      0x00
                  c_choice
000001  000000            DCB      0x00,0x00,0x00
                  send_flag
                          DCD      0x00000000
                  rec_flag
                          DCD      0x00000000
                  circle_flag
                          DCD      0x00000000
                  circle_state
                          DCD      0x00000000
                  i_ip
                          DCD      0x00000000
                  periodic_timer
                          %        8
                  arp_timer
                          %        8

                  __ARM_use_no_argv EQU 0
