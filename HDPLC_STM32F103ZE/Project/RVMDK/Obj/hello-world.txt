; generated by ARM C/C++ Compiler, 4.1 [Build 561]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\hello-world.o --depend=.\Obj\hello-world.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_DM9000 -I..\..\Libraries\uIP-1.0\apps\hello-world -ID:\Keil4\ARM\INC -ID:\Keil4\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\Libraries\uIP-1.0\apps\hello-world\hello-world.c]
                          THUMB

                          AREA ||i.handle_connection||, CODE, READONLY, ALIGN=2

                  handle_connection PROC
;;;86     static int
;;;87     handle_connection(struct hello_world_state *s)
000000  b570              PUSH     {r4-r6,lr}
;;;88     {
000002  4604              MOV      r4,r0
;;;89       PSOCK_BEGIN(&s->p);
000004  8800              LDRH     r0,[r0,#0]
;;;90     
;;;91       PSOCK_SEND_STR(&s->p, "Hello. What is your name?\n");
;;;92       //PSOCK_READTO(&s->p, '\n');
;;;93       PSOCK_READTO(&s->p, ' ');
;;;94       strncpy(s->name, s->inputbuffer, sizeof(s->name));
000006  f104052e          ADD      r5,r4,#0x2e
00000a  285d              CMP      r0,#0x5d              ;89
00000c  d014              BEQ      |L1.56|
00000e  dc03              BGT      |L1.24|
000010  b138              CBZ      r0,|L1.34|
000012  285b              CMP      r0,#0x5b              ;89
000014  d134              BNE      |L1.128|
000016  e006              B        |L1.38|
                  |L1.24|
000018  285f              CMP      r0,#0x5f              ;89
00001a  d01b              BEQ      |L1.84|
00001c  2860              CMP      r0,#0x60              ;89
00001e  d12f              BNE      |L1.128|
000020  e021              B        |L1.102|
                  |L1.34|
000022  205b              MOVS     r0,#0x5b              ;91
000024  8020              STRH     r0,[r4,#0]            ;91
                  |L1.38|
000026  221a              MOVS     r2,#0x1a              ;91
000028  a117              ADR      r1,|L1.136|
00002a  4620              MOV      r0,r4                 ;91
00002c  f7fffffe          BL       psock_send
000030  2800              CMP      r0,#0                 ;91
000032  d028              BEQ      |L1.134|
000034  205d              MOVS     r0,#0x5d              ;93
000036  8020              STRH     r0,[r4,#0]            ;93
                  |L1.56|
000038  2120              MOVS     r1,#0x20              ;93
00003a  4620              MOV      r0,r4                 ;93
00003c  f7fffffe          BL       psock_readto
000040  2800              CMP      r0,#0                 ;93
000042  d020              BEQ      |L1.134|
000044  2228              MOVS     r2,#0x28
000046  f1040124          ADD      r1,r4,#0x24
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       strncpy
;;;95       PSOCK_SEND_STR(&s->p, "Hello ");
000050  205f              MOVS     r0,#0x5f
000052  8020              STRH     r0,[r4,#0]
                  |L1.84|
000054  2206              MOVS     r2,#6
000056  a113              ADR      r1,|L1.164|
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       psock_send
00005e  2800              CMP      r0,#0
000060  d011              BEQ      |L1.134|
;;;96       PSOCK_SEND_STR(&s->p, s->name);
000062  2060              MOVS     r0,#0x60
000064  8020              STRH     r0,[r4,#0]
                  |L1.102|
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       strlen
00006c  4602              MOV      r2,r0
00006e  4629              MOV      r1,r5
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       psock_send
000076  2800              CMP      r0,#0
000078  d005              BEQ      |L1.134|
;;;97       PSOCK_CLOSE(&s->p);
00007a  490c              LDR      r1,|L1.172|
00007c  2010              MOVS     r0,#0x10
00007e  7008              STRB     r0,[r1,#0]
                  |L1.128|
;;;98       
;;;99       PSOCK_END(&s->p);
000080  2000              MOVS     r0,#0
000082  8020              STRH     r0,[r4,#0]
000084  2002              MOVS     r0,#2
                  |L1.134|
;;;100    }
000086  bd70              POP      {r4-r6,pc}
;;;101    /*---------------------------------------------------------------------------*/
                          ENDP

                  |L1.136|
000088  48656c6c          DCB      "Hello. What is your name?\n",0
00008c  6f2e2057
000090  68617420
000094  69732079
000098  6f757220
00009c  6e616d65
0000a0  3f0a00  
0000a3  00                DCB      0
                  |L1.164|
0000a4  48656c6c          DCB      "Hello ",0
0000a8  6f2000  
0000ab  00                DCB      0
                  |L1.172|
                          DCD      uip_flags

                          AREA ||i.hello_world_appcall||, CODE, READONLY, ALIGN=2

                  hello_world_appcall PROC
;;;54     void
;;;55     hello_world_appcall(void)
000000  4809              LDR      r0,|L2.40|
;;;56     {
000002  b510              PUSH     {r4,lr}
;;;57       /*
;;;58        * The uip_conn structure has a field called "appstate" that holds
;;;59        * the application state of the connection. We make a pointer to
;;;60        * this to access it easier.
;;;61        */
;;;62       struct hello_world_state *s = &(uip_conn->appstate);
;;;63     
;;;64       /*
;;;65        * If a new connection was just established, we should initialize
;;;66        * the protosocket in our applications' state structure.
;;;67        */
;;;68       if(uip_connected()) {
000004  6804              LDR      r4,[r0,#0]  ; uip_conn
000006  4809              LDR      r0,|L2.44|
000008  f104041c          ADD      r4,r4,#0x1c           ;62
00000c  7800              LDRB     r0,[r0,#0]  ; uip_flags
00000e  0640              LSLS     r0,r0,#25
000010  d505              BPL      |L2.30|
;;;69         PSOCK_INIT(&s->p, s->inputbuffer, sizeof(s->inputbuffer));
000012  220a              MOVS     r2,#0xa
000014  f1040124          ADD      r1,r4,#0x24
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       psock_init
                  |L2.30|
;;;70       }
;;;71     
;;;72       /*
;;;73        * Finally, we run the protosocket function that actually handles
;;;74        * the communication. We pass it a pointer to the application state
;;;75        * of the current connection.
;;;76        */
;;;77       handle_connection(s);
00001e  4620              MOV      r0,r4
000020  e8bd4010          POP      {r4,lr}
000024  f7ffbffe          B.W      handle_connection
;;;78     }
;;;79     /*---------------------------------------------------------------------------*/
                          ENDP

                  |L2.40|
                          DCD      uip_conn
                  |L2.44|
                          DCD      uip_flags

                          AREA ||i.hello_world_init||, CODE, READONLY, ALIGN=1

                  hello_world_init PROC
;;;40     void
;;;41     hello_world_init(void)
000000  f64e0003          MOV      r0,#0xe803
;;;42     {
;;;43       /* We start to listen for connections on TCP port 1000. */
;;;44       uip_listen(HTONS(1000));
000004  f7ffbffe          B.W      uip_listen
;;;45     }
;;;46     /*---------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.uip_log||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  uip_log PROC
;;;103    void
;;;104    uip_log(char *m)
000000  4601              MOV      r1,r0
;;;105    {
;;;106      printf("uIP log message: %s\n", m);
000002  a001              ADR      r0,|L4.8|
000004  f7ffbffe          B.W      __2printf
;;;107    }
                          ENDP

                  |L4.8|
000008  75495020          DCB      "uIP log message: %s\n",0
00000c  6c6f6720
000010  6d657373
000014  6167653a
000018  2025730a
00001c  00      
00001d  00                DCB      0
00001e  00                DCB      0
00001f  00                DCB      0
