; generated by ARM C/C++ Compiler, 4.1 [Build 561]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\uip-neighbor.o --depend=.\Obj\uip-neighbor.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_DM9000 -I..\..\Libraries\uIP-1.0\apps\hello-world -ID:\Keil4\ARM\INC -ID:\Keil4\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\Libraries\uIP-1.0\uip\uip-neighbor.c]
                          THUMB

                          AREA ||i.find_entry||, CODE, READONLY, ALIGN=2

                  find_entry PROC
;;;119    static struct neighbor_entry *
;;;120    find_entry(uip_ipaddr_t ipaddr)
000000  b530              PUSH     {r4,r5,lr}
;;;121    {
;;;122      int i;
;;;123    
;;;124      for(i = 0; i < ENTRIES; ++i) {
;;;125        if(uip_ipaddr_cmp(entries[i].ipaddr, ipaddr)) {
000002  8803              LDRH     r3,[r0,#0]
000004  4a0b              LDR      r2,|L1.52|
000006  2100              MOVS     r1,#0                 ;124
                  |L1.8|
000008  eb010441          ADD      r4,r1,r1,LSL #1
00000c  f8325024          LDRH     r5,[r2,r4,LSL #2]
000010  429d              CMP      r5,r3
000012  d10a              BNE      |L1.42|
000014  eb020484          ADD      r4,r2,r4,LSL #2
000018  8845              LDRH     r5,[r0,#2]
00001a  8864              LDRH     r4,[r4,#2]
00001c  42ac              CMP      r4,r5
00001e  d104              BNE      |L1.42|
;;;126          return &entries[i];
000020  eb010041          ADD      r0,r1,r1,LSL #1
000024  eb020080          ADD      r0,r2,r0,LSL #2
;;;127        }
;;;128      }
;;;129      return NULL;
;;;130    }
000028  bd30              POP      {r4,r5,pc}
                  |L1.42|
00002a  1c49              ADDS     r1,r1,#1              ;124
00002c  2908              CMP      r1,#8                 ;124
00002e  dbeb              BLT      |L1.8|
000030  2000              MOVS     r0,#0                 ;129
000032  bd30              POP      {r4,r5,pc}
;;;131    /*---------------------------------------------------------------------------*/
                          ENDP

                  |L1.52|
                          DCD      ||.bss||

                          AREA ||i.uip_neighbor_add||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  uip_neighbor_add PROC
;;;84     void
;;;85     uip_neighbor_add(uip_ipaddr_t ipaddr, struct uip_neighbor_addr *addr)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;86     {
000004  460c              MOV      r4,r1
;;;87       int i, oldest;
;;;88       u8_t oldest_time;
;;;89     
;;;90       printf("Adding neighbor with link address %02x:%02x:%02x:%02x:%02x:%02x\n",
000006  794b              LDRB     r3,[r1,#5]
000008  790a              LDRB     r2,[r1,#4]
00000a  78c9              LDRB     r1,[r1,#3]
00000c  4680              MOV      r8,r0                 ;86
00000e  e88d000e          STM      sp,{r1-r3}
000012  78a3              LDRB     r3,[r4,#2]
000014  7862              LDRB     r2,[r4,#1]
000016  7821              LDRB     r1,[r4,#0]
000018  4819              LDR      r0,|L2.128|
00001a  f7fffffe          BL       __2printf
;;;91     	 addr->addr.addr[0], addr->addr.addr[1], addr->addr.addr[2], addr->addr.addr[3],
;;;92     	 addr->addr.addr[4], addr->addr.addr[5]);
;;;93     
;;;94       /* Find the first unused entry or the oldest used entry. */
;;;95       oldest_time = 0;
00001e  f04f0c00          MOV      r12,#0
;;;96       oldest = 0;
;;;97       for(i = 0; i < ENTRIES; ++i) {
;;;98         if(entries[i].time == MAX_TIME) {
000022  4b18              LDR      r3,|L2.132|
000024  4661              MOV      r1,r12                ;96
000026  4660              MOV      r0,r12                ;97
                  |L2.40|
000028  eb000540          ADD      r5,r0,r0,LSL #1
00002c  eb030685          ADD      r6,r3,r5,LSL #2
000030  7ab2              LDRB     r2,[r6,#0xa]
000032  2a80              CMP      r2,#0x80
000034  d008              BEQ      |L2.72|
;;;99           oldest = i;
;;;100          break;
;;;101        }
;;;102        if(uip_ipaddr_cmp(entries[i].ipaddr, addr)) {
000036  f8335025          LDRH     r5,[r3,r5,LSL #2]
00003a  8827              LDRH     r7,[r4,#0]
00003c  42bd              CMP      r5,r7
00003e  d105              BNE      |L2.76|
000040  8875              LDRH     r5,[r6,#2]
000042  8866              LDRH     r6,[r4,#2]
000044  42b5              CMP      r5,r6
000046  d101              BNE      |L2.76|
                  |L2.72|
000048  4601              MOV      r1,r0                 ;99
00004a  e006              B        |L2.90|
                  |L2.76|
;;;103          oldest = i;
;;;104          break;
;;;105        }
;;;106        if(entries[i].time > oldest_time) {
00004c  4562              CMP      r2,r12
00004e  d901              BLS      |L2.84|
;;;107          oldest = i;
000050  4601              MOV      r1,r0
;;;108          oldest_time = entries[i].time;
000052  4694              MOV      r12,r2
                  |L2.84|
000054  1c40              ADDS     r0,r0,#1              ;97
000056  2808              CMP      r0,#8                 ;97
000058  dbe6              BLT      |L2.40|
                  |L2.90|
;;;109        }
;;;110      }
;;;111    
;;;112      /* Use the oldest or first free entry (either pointed to by the
;;;113         "oldest" variable). */
;;;114      entries[oldest].time = 0;
00005a  eb010141          ADD      r1,r1,r1,LSL #1
00005e  eb030081          ADD      r0,r3,r1,LSL #2
000062  2200              MOVS     r2,#0
000064  7282              STRB     r2,[r0,#0xa]
;;;115      uip_ipaddr_copy(entries[oldest].ipaddr, ipaddr);
000066  f8b85000          LDRH     r5,[r8,#0]
00006a  f8235021          STRH     r5,[r3,r1,LSL #2]
00006e  f8b81002          LDRH     r1,[r8,#2]
000072  8041              STRH     r1,[r0,#2]
;;;116      memcpy(&entries[oldest].addr, addr, sizeof(struct uip_neighbor_addr));
000074  6821              LDR      r1,[r4,#0]
000076  6041              STR      r1,[r0,#4]
000078  88a1              LDRH     r1,[r4,#4]
00007a  8101              STRH     r1,[r0,#8]
;;;117    }
00007c  e8bd83fe          POP      {r1-r9,pc}
;;;118    /*---------------------------------------------------------------------------*/
                          ENDP

                  |L2.128|
                          DCD      ||.constdata||
                  |L2.132|
                          DCD      ||.bss||

                          AREA ||i.uip_neighbor_init||, CODE, READONLY, ALIGN=2

                  uip_neighbor_init PROC
;;;62     void
;;;63     uip_neighbor_init(void)
000000  2000              MOVS     r0,#0
;;;64     {
;;;65       int i;
;;;66     
;;;67       for(i = 0; i < ENTRIES; ++i) {
;;;68         entries[i].time = MAX_TIME;
000002  4a06              LDR      r2,|L3.28|
000004  2180              MOVS     r1,#0x80
000006  bf00              NOP      
                  |L3.8|
000008  eb000340          ADD      r3,r0,r0,LSL #1
00000c  eb020383          ADD      r3,r2,r3,LSL #2
000010  1c40              ADDS     r0,r0,#1              ;67
000012  7299              STRB     r1,[r3,#0xa]
000014  2808              CMP      r0,#8                 ;67
000016  dbf7              BLT      |L3.8|
;;;69       }
;;;70     }
000018  4770              BX       lr
;;;71     /*---------------------------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      ||.bss||

                          AREA ||i.uip_neighbor_lookup||, CODE, READONLY, ALIGN=1

                  uip_neighbor_lookup PROC
;;;143    struct uip_neighbor_addr *
;;;144    uip_neighbor_lookup(uip_ipaddr_t ipaddr)
000000  b510              PUSH     {r4,lr}
;;;145    {
;;;146      struct neighbor_entry *e;
;;;147    
;;;148      e = find_entry(ipaddr);
000002  f7fffffe          BL       find_entry
;;;149      if(e != NULL) {
000006  2800              CMP      r0,#0
000008  d000              BEQ      |L4.12|
;;;150        /*    printf("Lookup neighbor with link address %02x:%02x:%02x:%02x:%02x:%02x\n",
;;;151    	   e->addr.addr.addr[0], e->addr.addr.addr[1], e->addr.addr.addr[2], e->addr.addr.addr[3],
;;;152    	   e->addr.addr.addr[4], e->addr.addr.addr[5]);*/
;;;153    
;;;154        return &e->addr;
00000a  1d00              ADDS     r0,r0,#4
                  |L4.12|
;;;155      }
;;;156      return NULL;
;;;157    }
00000c  bd10              POP      {r4,pc}
;;;158    /*---------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.uip_neighbor_periodic||, CODE, READONLY, ALIGN=2

                  uip_neighbor_periodic PROC
;;;72     void
;;;73     uip_neighbor_periodic(void)
000000  4b07              LDR      r3,|L5.32|
;;;74     {
;;;75       int i;
;;;76     
;;;77       for(i = 0; i < ENTRIES; ++i) {
000002  2000              MOVS     r0,#0
                  |L5.4|
;;;78         if(entries[i].time < MAX_TIME) {
000004  eb000140          ADD      r1,r0,r0,LSL #1
000008  eb030181          ADD      r1,r3,r1,LSL #2
00000c  7a8a              LDRB     r2,[r1,#0xa]
00000e  2a80              CMP      r2,#0x80
000010  d201              BCS      |L5.22|
;;;79           entries[i].time++;
000012  1c52              ADDS     r2,r2,#1
000014  728a              STRB     r2,[r1,#0xa]
                  |L5.22|
000016  1c40              ADDS     r0,r0,#1              ;77
000018  2808              CMP      r0,#8                 ;77
00001a  dbf3              BLT      |L5.4|
;;;80         }
;;;81       }
;;;82     }
00001c  4770              BX       lr
;;;83     /*---------------------------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      ||.bss||

                          AREA ||i.uip_neighbor_update||, CODE, READONLY, ALIGN=1

                  uip_neighbor_update PROC
;;;132    void
;;;133    uip_neighbor_update(uip_ipaddr_t ipaddr)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135      struct neighbor_entry *e;
;;;136    
;;;137      e = find_entry(ipaddr);
000002  f7fffffe          BL       find_entry
;;;138      if(e != NULL) {
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L6.14|
;;;139        e->time = 0;
00000a  2100              MOVS     r1,#0
00000c  7281              STRB     r1,[r0,#0xa]
                  |L6.14|
;;;140      }
;;;141    }
00000e  bd10              POP      {r4,pc}
;;;142    /*---------------------------------------------------------------------------*/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  entries
                          %        96

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  41646469          DCB      0x41,0x64,0x64,0x69
000004  6e67206e          DCB      0x6e,0x67,0x20,0x6e
000008  65696768          DCB      0x65,0x69,0x67,0x68
00000c  626f7220          DCB      0x62,0x6f,0x72,0x20
000010  77697468          DCB      0x77,0x69,0x74,0x68
000014  206c696e          DCB      0x20,0x6c,0x69,0x6e
000018  6b206164          DCB      0x6b,0x20,0x61,0x64
00001c  64726573          DCB      0x64,0x72,0x65,0x73
000020  73202530          DCB      0x73,0x20,0x25,0x30
000024  32783a25          DCB      0x32,0x78,0x3a,0x25
000028  3032783a          DCB      0x30,0x32,0x78,0x3a
00002c  25303278          DCB      0x25,0x30,0x32,0x78
000030  3a253032          DCB      0x3a,0x25,0x30,0x32
000034  783a2530          DCB      0x78,0x3a,0x25,0x30
000038  32783a25          DCB      0x32,0x78,0x3a,0x25
00003c  3032780a          DCB      0x30,0x32,0x78,0x0a
000040  00                DCB      0x00
