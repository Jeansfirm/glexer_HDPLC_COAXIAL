; generated by ARM C/C++ Compiler, 4.1 [Build 561]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\misc.o --depend=.\Obj\misc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_DM9000 -I..\..\Libraries\uIP-1.0\apps\hello-world -ID:\Keil4\ARM\INC -ID:\Keil4\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\Libraries\STM32F10x_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=1

                  NVIC_Init PROC
;;;110      */
;;;111    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;112    {
;;;113      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
000002  220f              MOVS     r2,#0xf
;;;114      
;;;115      /* Check the parameters */
;;;116      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;117      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;118      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;119        
;;;120      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000004  78c5              LDRB     r5,[r0,#3]
;;;121      {
;;;122        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;123        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;124        tmppre = (0x4 - tmppriority);
;;;125        tmpsub = tmpsub >> tmppriority;
;;;126    
;;;127        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;128        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;129        tmppriority = tmppriority << 0x04;
;;;130            
;;;131        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000006  7803              LDRB     r3,[r0,#0]
000008  f04f21e0          MOV      r1,#0xe000e000        ;123
;;;132        
;;;133        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;134        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
00000c  2401              MOVS     r4,#1
00000e  b1e5              CBZ      r5,|L1.74|
000010  f8d15d0c          LDR      r5,[r1,#0xd0c]        ;123
000014  7846              LDRB     r6,[r0,#1]            ;127
000016  f40565e0          AND      r5,r5,#0x700          ;123
00001a  f5c565e0          RSB      r5,r5,#0x700          ;123
00001e  0a2d              LSRS     r5,r5,#8              ;123
000020  f1c50704          RSB      r7,r5,#4              ;124
000024  40ea              LSRS     r2,r2,r5              ;125
000026  7885              LDRB     r5,[r0,#2]            ;128
000028  40be              LSLS     r6,r6,r7              ;127
00002a  4015              ANDS     r5,r5,r2              ;128
00002c  4335              ORRS     r5,r5,r6              ;128
00002e  440b              ADD      r3,r3,r1              ;131
000030  012a              LSLS     r2,r5,#4              ;128
000032  f8832400          STRB     r2,[r3,#0x400]        ;131
000036  7800              LDRB     r0,[r0,#0]
000038  0942              LSRS     r2,r0,#5
00003a  f000001f          AND      r0,r0,#0x1f
00003e  4084              LSLS     r4,r4,r0
000040  eb010082          ADD      r0,r1,r2,LSL #2
000044  f8c04100          STR      r4,[r0,#0x100]
;;;135          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;136      }
;;;137      else
;;;138      {
;;;139        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;140        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;141          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;142      }
;;;143    }
000048  bdf0              POP      {r4-r7,pc}
                  |L1.74|
00004a  f003001f          AND      r0,r3,#0x1f           ;140
00004e  4084              LSLS     r4,r4,r0              ;140
000050  0958              LSRS     r0,r3,#5              ;140
000052  eb010080          ADD      r0,r1,r0,LSL #2       ;140
000056  f8c04180          STR      r4,[r0,#0x180]        ;140
00005a  bdf0              POP      {r4-r7,pc}
;;;144    
                          ENDP


                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;94       */
;;;95     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4902              LDR      r1,|L2.12|
;;;96     {
;;;97       /* Check the parameters */
;;;98       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;99       
;;;100      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;101      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4308              ORRS     r0,r0,r1
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;102    }
000008  4770              BX       lr
;;;103    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x05fa0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;153      */
;;;154    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  4a02              LDR      r2,|L3.12|
;;;155    { 
;;;156      /* Check the parameters */
;;;157      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;158      assert_param(IS_NVIC_OFFSET(Offset));  
;;;159       
;;;160      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000002  4011              ANDS     r1,r1,r2
000004  4301              ORRS     r1,r1,r0
000006  4802              LDR      r0,|L3.16|
000008  6001              STR      r1,[r0,#0]
;;;161    }
00000a  4770              BX       lr
;;;162    
                          ENDP

                  |L3.12|
                          DCD      0x1fffff80
                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=1

                  NVIC_SystemLPConfig PROC
;;;172      */
;;;173    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  f04f22e0          MOV      r2,#0xe000e000
;;;174    {
;;;175      /* Check the parameters */
;;;176      assert_param(IS_NVIC_LP(LowPowerMode));
;;;177      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;178      
;;;179      if (NewState != DISABLE)
000004  2900              CMP      r1,#0
;;;180      {
;;;181        SCB->SCR |= LowPowerMode;
;;;182      }
;;;183      else
;;;184      {
;;;185        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000006  f8d21d10          LDR      r1,[r2,#0xd10]
00000a  d001              BEQ      |L4.16|
00000c  4301              ORRS     r1,r1,r0              ;181
00000e  e000              B        |L4.18|
                  |L4.16|
000010  4381              BICS     r1,r1,r0
                  |L4.18|
000012  f8c21d10          STR      r1,[r2,#0xd10]        ;181
;;;186      }
;;;187    }
000016  4770              BX       lr
;;;188    
                          ENDP


                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;196      */
;;;197    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;198    {
;;;199      /* Check the parameters */
;;;200      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;201      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;202      {
;;;203        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;204      }
;;;205      else
;;;206      {
;;;207        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000006  6908              LDR      r0,[r1,#0x10]
000008  d003              BEQ      |L5.18|
00000a  f0200004          BIC      r0,r0,#4
                  |L5.14|
00000e  6108              STR      r0,[r1,#0x10]         ;203
;;;208      }
;;;209    }
000010  4770              BX       lr
                  |L5.18|
000012  f0400004          ORR      r0,r0,#4              ;203
000016  e7fa              B        |L5.14|
;;;210    
                          ENDP

