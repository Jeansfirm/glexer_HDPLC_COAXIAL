; generated by ARM C/C++ Compiler, 4.1 [Build 561]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\hdplc_struct.o --depend=.\Obj\hdplc_struct.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_DM9000 -I..\..\Libraries\uIP-1.0\apps\hello-world -ID:\Keil4\ARM\INC -ID:\Keil4\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER ..\..\Source\src\hdplc_struct.c]
                          THUMB

                          AREA ||i.EtherRx||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  EtherRx PROC
;;;64     
;;;65     int EtherRx(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b570              PUSH     {r4-r6,lr}
;;;66     {
000002  4605              MOV      r5,r0
;;;67     	int theRxByte;
;;;68     	int i;
;;;69     	//struct udp_demo_appstate *s = (struct udp_demo_appstate *)&uip_udp_conn->appstate;
;;;70     	memset(inPlc->m_buffer,0,4096);
000004  f44f5180          MOV      r1,#0x1000
000008  1d00              ADDS     r0,r0,#4
00000a  f7fffffe          BL       __aeabi_memclr4
;;;71     	memcpy(inPlc->m_buffer,uip_appdata,uip_len);
00000e  4808              LDR      r0,|L1.48|
000010  4c06              LDR      r4,|L1.44|
000012  6801              LDR      r1,[r0,#0]  ; uip_appdata
000014  8822              LDRH     r2,[r4,#0]  ; uip_len
000016  1d28              ADDS     r0,r5,#4
000018  f7fffffe          BL       __aeabi_memcpy
;;;72     	//memcpy(inPlc->m_buffer,uip_buf,uip_len);
;;;73     	printf("\n\n\rEthernet connection Rxbytes:%d\n\r",uip_len);
00001c  8821              LDRH     r1,[r4,#0]  ; uip_len
00001e  a005              ADR      r0,|L1.52|
000020  f7fffffe          BL       __2printf
;;;74     
;;;75     
;;;76     	//print ethernet connection received data
;;;77         /*
;;;78     	printf("Ethernet connection Received data:\n\r");
;;;79     	for(i=0;i<uip_len;i++)
;;;80     	{
;;;81     		printf("%02x ",((char *)uip_appdata)[i]);
;;;82     	}
;;;83     	printf("\n\r");
;;;84     	*/
;;;85     
;;;86     	uip_len=0;
000024  2000              MOVS     r0,#0
000026  8020              STRH     r0,[r4,#0]
;;;87     
;;;88     	return;
;;;89     }
000028  bd70              POP      {r4-r6,pc}
;;;90     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      uip_len
                  |L1.48|
                          DCD      uip_appdata
                  |L1.52|
000034  0a0a0d45          DCB      "\n\n\rEthernet connection Rxbytes:%d\n\r",0
000038  74686572
00003c  6e657420
000040  636f6e6e
000044  65637469
000048  6f6e2052
00004c  78627974
000050  65733a25
000054  640a0d00

                          AREA ||i.EtherTx||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  EtherTx PROC
;;;48     
;;;49     int EtherTx(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b510              PUSH     {r4,lr}
;;;50     {
;;;51     	int theSize,theRet;
;;;52     	struct udp_demo_appstate *s = (struct udp_demo_appstate *)&uip_udp_conn->appstate;
000002  4907              LDR      r1,|L2.32|
;;;53     	
;;;54     	theSize=12+inPlc->m_pCmdData->length+2;
000004  680a              LDR      r2,[r1,#0]  ; uip_udp_conn
000006  c802              LDM      r0!,{r1}
000008  8949              LDRH     r1,[r1,#0xa]
00000a  310e              ADDS     r1,r1,#0xe
00000c  e9c20104          STRD     r0,r1,[r2,#0x10]
;;;55     	s->textlen = theSize;
;;;56     	s->textptr = inPlc->m_buffer;
;;;57     
;;;58     	//printf("Eth Tx theSize:%d\t",theSize);
;;;59     	printf("Tx:%d\t",theSize);		
000010  a004              ADR      r0,|L2.36|
000012  f7fffffe          BL       __2printf
;;;60     	udp_senddata();
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      udp_senddata
;;;61     
;;;62     	return;
;;;63     }
;;;64     
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      uip_udp_conn
                  |L2.36|
000024  54783a25          DCB      "Tx:%d\t",0
000028  640900  
00002b  00                DCB      0

                          AREA ||i.GetCmdBody||, CODE, READONLY, ALIGN=1

                  GetCmdBody PROC
;;;43     
;;;44     unsigned char * GetCmdBody(struct C_HDPLC_EXTCMD_IF *inStruct)
000000  6800              LDR      r0,[r0,#0]
;;;45     {
;;;46     	return inStruct->m_pCmdData->param;
000002  301c              ADDS     r0,r0,#0x1c
;;;47     }
000004  4770              BX       lr
;;;48     
                          ENDP


                          AREA ||i.Initialize||, CODE, READONLY, ALIGN=2

                  Initialize PROC
;;;14     
;;;15     int Initialize(struct C_HDPLC_EXTCMD_IF *inStruct,unsigned short inVCID,unsigned long inSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;16     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;17     	
;;;18     	memset((inStruct->m_buffer),0,sizeof(inStruct->m_buffer));
00000a  f44f5180          MOV      r1,#0x1000
00000e  1d00              ADDS     r0,r0,#4
000010  f7fffffe          BL       __aeabi_memclr4
;;;19     	//bzero(inStruct->m_buffer,sizeof(inStruct->m_buffer));
;;;20     	inStruct->m_pCmdData = (T_HDPLC_EXTCMD_FORMAT *)(inStruct->m_buffer+2);
000014  1db4              ADDS     r4,r6,#6
;;;21     
;;;22     	inStruct->m_pCmdData->header[0] = (unsigned char)0xaa;
000016  20aa              MOVS     r0,#0xaa
000018  6034              STR      r4,[r6,#0]
00001a  71b0              STRB     r0,[r6,#6]
;;;23     	inStruct->m_pCmdData->header[1] = (unsigned char)0xaa;
00001c  71f0              STRB     r0,[r6,#7]
;;;24     	inStruct->m_pCmdData->header[2] = (unsigned char)0xaa;
00001e  7230              STRB     r0,[r6,#8]
;;;25     	inStruct->m_pCmdData->header[3] = (unsigned char)0xaa;
000020  7270              STRB     r0,[r6,#9]
;;;26     	inStruct->m_pCmdData->header[4] = (unsigned char)0xaa;
000022  72b0              STRB     r0,[r6,#0xa]
;;;27     	inStruct->m_pCmdData->header[5] = (unsigned char)0xaa;
000024  72f0              STRB     r0,[r6,#0xb]
;;;28     	inStruct->m_pCmdData->header[6] = (unsigned char)0xaa;
000026  7330              STRB     r0,[r6,#0xc]
;;;29     	inStruct->m_pCmdData->header[7] = (unsigned char)0xab;
000028  20ab              MOVS     r0,#0xab
00002a  7370              STRB     r0,[r6,#0xd]
;;;30     	
;;;31     
;;;32     	inStruct->m_pCmdData->taskid = 3;
00002c  2003              MOVS     r0,#3
00002e  73b0              STRB     r0,[r6,#0xe]
;;;33     	inStruct->m_pCmdData->cid = 0xf000|0x0001;
000030  f24f0001          MOV      r0,#0xf001
000034  8270              STRH     r0,[r6,#0x12]
;;;34     	inStruct->m_pCmdData->vid = 0x0b4e7e67;			//vendor id(panasonic)
000036  4806              LDR      r0,|L4.80|
;;;35     	inStruct->m_pCmdData->vcid = inVCID|0x0001;
000038  6160              STR      r0,[r4,#0x14]
00003a  f0470001          ORR      r0,r7,#1
00003e  8320              STRH     r0,[r4,#0x18]
;;;36     	
;;;37     	inStruct->m_pCmdData->cmdlength = 8+inSize;
000040  f1050008          ADD      r0,r5,#8
;;;38     	inStruct->m_pCmdData->length = (unsigned short)(16+inSize);
000044  3510              ADDS     r5,r5,#0x10
000046  6120              STR      r0,[r4,#0x10]
000048  8165              STRH     r5,[r4,#0xa]
;;;39     	
;;;40     	return D_RETURN_SUCCESS;
00004a  2001              MOVS     r0,#1
;;;41     	
;;;42     }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;43     
                          ENDP

                  |L4.80|
                          DCD      0x0b4e7e67

                          AREA ||i.String2Hex||, CODE, READONLY, ALIGN=1

                  String2Hex PROC
;;;90     
;;;91     void String2Hex(char *inString,char *outData)
000000  b5f8              PUSH     {r3-r7,lr}
;;;92     {
;;;93     	int		len, n = 0;
000002  2700              MOVS     r7,#0
;;;94     	char	tmp[2] = {0, 0};
;;;95     	char	*po = outData;
000004  460c              MOV      r4,r1
;;;96     	char	*pi = inString;
000006  4606              MOV      r6,r0
;;;97     	
;;;98     	len = strlen(inString);
000008  9700              STR      r7,[sp,#0]
00000a  f7fffffe          BL       strlen
00000e  0005              MOVS     r5,r0
;;;99     
;;;100    	if (len == 0) return;
000010  d016              BEQ      |L5.64|
                  |L5.18|
;;;101    	
;;;102    	while(1)
;;;103    	{
;;;104    		memcpy(tmp,pi,1);
000012  7830              LDRB     r0,[r6,#0]
;;;105    		
;;;106    		if (n % 2 == 0)
000014  07f9              LSLS     r1,r7,#31
000016  f88d0000          STRB     r0,[sp,#0]            ;104
;;;107    		{
;;;108    			*po = ((char)strtoul(tmp, NULL, 16)) << 4;
;;;109    		}
;;;110    		else
;;;111    		{
;;;112    			*po |= ((char)strtoul(tmp, NULL, 16)) & 0xf;
00001a  f04f0210          MOV      r2,#0x10
00001e  f04f0100          MOV      r1,#0
000022  4668              MOV      r0,sp
000024  d00d              BEQ      |L5.66|
000026  f7fffffe          BL       strtoul
00002a  7821              LDRB     r1,[r4,#0]
00002c  f3c00003          UBFX     r0,r0,#0,#4
000030  4308              ORRS     r0,r0,r1
000032  f8040b01          STRB     r0,[r4],#1
                  |L5.54|
;;;113    			po++;
;;;114    		}
;;;115    		
;;;116    		pi++;
000036  1c76              ADDS     r6,r6,#1
;;;117    		len--;
000038  1e6d              SUBS     r5,r5,#1
;;;118    		n++;
00003a  f1070701          ADD      r7,r7,#1
;;;119    		if (len == 0) break;
00003e  d1e8              BNE      |L5.18|
                  |L5.64|
;;;120    	}
;;;121    	
;;;122    	return;
;;;123    }
000040  bdf8              POP      {r3-r7,pc}
                  |L5.66|
000042  f7fffffe          BL       strtoul
000046  0100              LSLS     r0,r0,#4              ;108
000048  7020              STRB     r0,[r4,#0]            ;108
00004a  e7f4              B        |L5.54|
;;;124    
                          ENDP


                          AREA ||i.print_GetCINRMap2To28||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  print_GetCINRMap2To28 PROC
;;;607    
;;;608    int print_GetCINRMap2To28(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b570              PUSH     {r4-r6,lr}
;;;609    {
;;;610    	T_HDPLC_EXTCMD_GET_CINRMAP_2TO28_CNF *theCnf;
;;;611    	int i;
;;;612    
;;;613    	theCnf = (T_HDPLC_EXTCMD_GET_CINRMAP_2TO28_CNF *)GetCmdBody(inPlc);
;;;614    	if (theCnf->result != 0)
000002  6805              LDR      r5,[r0,#0]
000004  f8150f1c          LDRB     r0,[r5,#0x1c]!
000008  b120              CBZ      r0,|L6.20|
;;;615    	{
;;;616    		printf("Get CINR Map result!=0 failure!!\n\r");
00000a  a00b              ADR      r0,|L6.56|
00000c  f7fffffe          BL       __2printf
;;;617    		return D_RETURN_FAILURE;
000010  2000              MOVS     r0,#0
;;;618    	}
;;;619    	printf("Execute Get CINR Map command successfully!\n\r");
;;;620    
;;;621    	for(i=0;i<432;i++)
;;;622    	{
;;;623    		printf("cinr[%d]:%d\t",i,theCnf->cinr[i]);
;;;624    	}
;;;625    }
000012  bd70              POP      {r4-r6,pc}
                  |L6.20|
000014  a011              ADR      r0,|L6.92|
000016  f7fffffe          BL       __2printf
00001a  2400              MOVS     r4,#0                 ;621
00001c  f44f76d8          MOV      r6,#0x1b0             ;621
                  |L6.32|
000020  eb050044          ADD      r0,r5,r4,LSL #1       ;623
000024  4621              MOV      r1,r4                 ;623
000026  8882              LDRH     r2,[r0,#4]            ;623
000028  a018              ADR      r0,|L6.140|
00002a  f7fffffe          BL       __2printf
00002e  1c64              ADDS     r4,r4,#1              ;621
000030  42b4              CMP      r4,r6                 ;621
000032  dbf5              BLT      |L6.32|
000034  bd70              POP      {r4-r6,pc}
;;;626    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
000038  47657420          DCB      "Get CINR Map result!=0 failure!!\n\r",0
00003c  43494e52
000040  204d6170
000044  20726573
000048  756c7421
00004c  3d302066
000050  61696c75
000054  72652121
000058  0a0d00  
00005b  00                DCB      0
                  |L6.92|
00005c  45786563          DCB      "Execute Get CINR Map command successfully!\n\r",0
000060  75746520
000064  47657420
000068  43494e52
00006c  204d6170
000070  20636f6d
000074  6d616e64
000078  20737563
00007c  63657373
000080  66756c6c
000084  79210a0d
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L6.140|
00008c  63696e72          DCB      "cinr[%d]:%d\t",0
000090  5b25645d
000094  3a256409
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.print_GetPhyRate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  print_GetPhyRate PROC
;;;260    
;;;261    int print_GetPhyRate(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b570              PUSH     {r4-r6,lr}
;;;262    {
;;;263    	T_HDPLC_EXTCMD_GET_PHY_RATE_CNF *theCnf;
;;;264    	int i,num;
;;;265    
;;;266    	theCnf = (T_HDPLC_EXTCMD_GET_PHY_RATE_CNF *)GetCmdBody(inPlc);
;;;267    	if (theCnf->result != 0)
000002  6805              LDR      r5,[r0,#0]
000004  f8150f1c          LDRB     r0,[r5,#0x1c]!
000008  b120              CBZ      r0,|L7.20|
;;;268    	{
;;;269    		printf("GetPhyRate result=0 failure!!\n\r");
00000a  a010              ADR      r0,|L7.76|
00000c  f7fffffe          BL       __2printf
;;;270    		return D_RETURN_FAILURE;
000010  2000              MOVS     r0,#0
;;;271    	}
;;;272    	printf("Execute GetPhyRate command successfully!\n\r");
;;;273    
;;;274    	num=theCnf->termNum;
;;;275    	printf("Number of plc device connected to ref device is:%d\n\r",num);
;;;276    	printf("Device 1:\n\r");
;;;277    	printf("MAC Adress:\n\r");
;;;278    	for(0;i<6;i++)
;;;279    	{
;;;280    		printf("%02x ",theCnf->plc_rate->plcmacAddr[i]);
;;;281    	}
;;;282    	printf("Rate:\n\r");
;;;283    
;;;284    	return D_RETURN_SUCCESS;
;;;285    }
000012  bd70              POP      {r4-r6,pc}
                  |L7.20|
000014  a015              ADR      r0,|L7.108|
000016  f7fffffe          BL       __2printf
00001a  7869              LDRB     r1,[r5,#1]            ;274
00001c  a01e              ADR      r0,|L7.152|
00001e  f7fffffe          BL       __2printf
000022  a02b              ADR      r0,|L7.208|
000024  f7fffffe          BL       __2printf
000028  a02c              ADR      r0,|L7.220|
00002a  f7fffffe          BL       __2printf
00002e  e005              B        |L7.60|
                  |L7.48|
000030  1928              ADDS     r0,r5,r4              ;280
000032  7901              LDRB     r1,[r0,#4]            ;280
000034  a02d              ADR      r0,|L7.236|
000036  f7fffffe          BL       __2printf
00003a  1c64              ADDS     r4,r4,#1              ;278
                  |L7.60|
00003c  2c06              CMP      r4,#6                 ;278
00003e  dbf7              BLT      |L7.48|
000040  a02c              ADR      r0,|L7.244|
000042  f7fffffe          BL       __2printf
000046  2001              MOVS     r0,#1                 ;284
000048  bd70              POP      {r4-r6,pc}
;;;286    
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
00004c  47657450          DCB      "GetPhyRate result=0 failure!!\n\r",0
000050  68795261
000054  74652072
000058  6573756c
00005c  743d3020
000060  6661696c
000064  75726521
000068  210a0d00
                  |L7.108|
00006c  45786563          DCB      "Execute GetPhyRate command successfully!\n\r",0
000070  75746520
000074  47657450
000078  68795261
00007c  74652063
000080  6f6d6d61
000084  6e642073
000088  75636365
00008c  73736675
000090  6c6c7921
000094  0a0d00  
000097  00                DCB      0
                  |L7.152|
000098  4e756d62          DCB      "Number of plc device connected to ref device is:%d\n\r",0
00009c  6572206f
0000a0  6620706c
0000a4  63206465
0000a8  76696365
0000ac  20636f6e
0000b0  6e656374
0000b4  65642074
0000b8  6f207265
0000bc  66206465
0000c0  76696365
0000c4  2069733a
0000c8  25640a0d
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L7.208|
0000d0  44657669          DCB      "Device 1:\n\r",0
0000d4  63652031
0000d8  3a0a0d00
                  |L7.220|
0000dc  4d414320          DCB      "MAC Adress:\n\r",0
0000e0  41647265
0000e4  73733a0a
0000e8  0d00    
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L7.236|
0000ec  25303278          DCB      "%02x ",0
0000f0  2000    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L7.244|
0000f4  52617465          DCB      "Rate:\n\r",0
0000f8  3a0a0d00

                          AREA ||i.print_GetStatus||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  print_GetStatus PROC
;;;141    
;;;142    int print_GetStatus(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b53e              PUSH     {r1-r5,lr}
;;;143    {
;;;144    	 T_HDPLC_EXTCMD_GET_STATUS_CNF *theCnf;
;;;145    
;;;146    	 theCnf = (T_HDPLC_EXTCMD_GET_STATUS_CNF *)GetCmdBody(inPlc);
;;;147    
;;;148    	 if (theCnf->result != 0)
000002  6804              LDR      r4,[r0,#0]
000004  f8140f1c          LDRB     r0,[r4,#0x1c]!
000008  b120              CBZ      r0,|L8.20|
;;;149    	{
;;;150    		printf("Cmd executed failed! (result!=1)\n\r");
00000a  a039              ADR      r0,|L8.240|
00000c  f7fffffe          BL       __2printf
;;;151    		return D_RETURN_FAILURE;
000010  2000              MOVS     r0,#0
;;;152    	}
;;;153    
;;;154    	/*-------------------------------------------------------------------------*
;;;155    		displays result 
;;;156    		$1 ref mac address
;;;157    	 *-------------------------------------------------------------------------*/
;;;158    	if ((theCnf->mtMode & 0x1) == D_MASTER_MODEL)
;;;159    	{
;;;160    		printf("\n\r");
;;;161    		printf(" Mode ................... Master\n\r");
;;;162    		printf(" MAC Address ............ %02x-%02x-%02x-%02x-%02x-%02x\n\r", theCnf->selfAddr[0], theCnf->selfAddr[1], theCnf->selfAddr[2], theCnf->selfAddr[3], theCnf->selfAddr[4], theCnf->selfAddr[5]);
;;;163    	}
;;;164    	else
;;;165    	{
;;;166    		if (theCnf->authMode == D_AUTHENRICATION_TRUE)
;;;167    		{
;;;168    			printf("\n\r");
;;;169    			printf(" Mode ................... Terminal(authenticated)\n\r");
;;;170    		}
;;;171    		else
;;;172    		{
;;;173    			printf("\n\r");
;;;174    			printf(" Mode ................... Terminal(not authenticated)\n\r");
;;;175    		}
;;;176    		printf(" MAC Address ............ %02x-%02x-%02x-%02x-%02x-%02x\n\r", theCnf->selfAddr[0], theCnf->selfAddr[1], theCnf->selfAddr[2], theCnf->selfAddr[3], theCnf->selfAddr[4], theCnf->selfAddr[5]);
;;;177    		printf(" Master MAC Address ..... %02x-%02x-%02x-%02x-%02x-%02x\n\r", theCnf->mstAddr[0], theCnf->mstAddr[1], theCnf->mstAddr[2], theCnf->mstAddr[3], theCnf->mstAddr[4], theCnf->mstAddr[5]);
;;;178    
;;;179    	}
;;;180    	
;;;181    	printf(" Registered Info ........ %d\n\r", theCnf->registeredInfo);
;;;182    	printf(" Ether LinkUp ........... %d\n\r", theCnf->ethLinkUp);
;;;183    	printf(" Ether SpdDpx ........... %d\n\r", theCnf->ethSpdDpx);
;;;184    	printf(" Multiple Mode .......... %d\n\r", theCnf->multipleMode);
;;;185    
;;;186    	printf(" Main Version ........... %s\n\r", theCnf->mainVersion);
;;;187    	printf(" Boot Version ........... %s\n\r", theCnf->bootVersion);
;;;188    
;;;189    	printf(" Beacon Status .......... %d\n\r", theCnf->rcvBcStatus);
;;;190    
;;;191    	printf("\n\r$1%02x%02x%02x%02x%02x%02x\n\r", theCnf->selfAddr[0], theCnf->selfAddr[1], theCnf->selfAddr[2], theCnf->selfAddr[3], theCnf->selfAddr[4], theCnf->selfAddr[5]);
;;;192    
;;;193    	printf("\n\r");
;;;194    	
;;;195    }
000012  bd3e              POP      {r1-r5,pc}
                  |L8.20|
000014  f8940071          LDRB     r0,[r4,#0x71]         ;158
000018  07c0              LSLS     r0,r0,#31             ;158
00001a  d00f              BEQ      |L8.60|
00001c  a03c              ADR      r0,|L8.272|
00001e  f7fffffe          BL       __2printf
000022  a03c              ADR      r0,|L8.276|
000024  f7fffffe          BL       __2printf
000028  7b61              LDRB     r1,[r4,#0xd]          ;162
00002a  7be3              LDRB     r3,[r4,#0xf]          ;162
00002c  7ba2              LDRB     r2,[r4,#0xe]          ;162
00002e  e88d000e          STM      sp,{r1-r3}            ;162
000032  7b23              LDRB     r3,[r4,#0xc]          ;162
000034  7ae2              LDRB     r2,[r4,#0xb]          ;162
000036  7aa1              LDRB     r1,[r4,#0xa]          ;162
000038  a03f              ADR      r0,|L8.312|
00003a  e023              B        |L8.132|
                  |L8.60|
00003c  7a60              LDRB     r0,[r4,#9]            ;166
00003e  2801              CMP      r0,#1                 ;166
000040  a033              ADR      r0,|L8.272|
000042  d050              BEQ      |L8.230|
000044  f7fffffe          BL       __2printf
000048  a04a              ADR      r0,|L8.372|
00004a  bf00              NOP                            ;174
                  |L8.76|
00004c  f7fffffe          BL       __2printf
000050  7b61              LDRB     r1,[r4,#0xd]          ;176
000052  7be3              LDRB     r3,[r4,#0xf]          ;176
000054  7ba2              LDRB     r2,[r4,#0xe]          ;176
000056  e88d000e          STM      sp,{r1-r3}            ;176
00005a  7b23              LDRB     r3,[r4,#0xc]          ;176
00005c  7ae2              LDRB     r2,[r4,#0xb]          ;176
00005e  7aa1              LDRB     r1,[r4,#0xa]          ;176
000060  a035              ADR      r0,|L8.312|
000062  f7fffffe          BL       __2printf
000066  f8941075          LDRB     r1,[r4,#0x75]         ;177
00006a  f8943077          LDRB     r3,[r4,#0x77]         ;177
00006e  f8942076          LDRB     r2,[r4,#0x76]         ;177
000072  e88d000e          STM      sp,{r1-r3}            ;177
000076  f8943074          LDRB     r3,[r4,#0x74]         ;177
00007a  f8942073          LDRB     r2,[r4,#0x73]         ;177
00007e  f8941072          LDRB     r1,[r4,#0x72]         ;177
000082  a04a              ADR      r0,|L8.428|
                  |L8.132|
000084  f7fffffe          BL       __2printf
000088  7921              LDRB     r1,[r4,#4]            ;181
00008a  a057              ADR      r0,|L8.488|
00008c  f7fffffe          BL       __2printf
000090  7961              LDRB     r1,[r4,#5]            ;182
000092  a05d              ADR      r0,|L8.520|
000094  f7fffffe          BL       __2printf
000098  88e1              LDRH     r1,[r4,#6]            ;183
00009a  a063              ADR      r0,|L8.552|
00009c  f7fffffe          BL       __2printf
0000a0  7a21              LDRB     r1,[r4,#8]            ;184
0000a2  a069              ADR      r0,|L8.584|
0000a4  f7fffffe          BL       __2printf
0000a8  f1040110          ADD      r1,r4,#0x10           ;186
0000ac  a06e              ADR      r0,|L8.616|
0000ae  f7fffffe          BL       __2printf
0000b2  f1040150          ADD      r1,r4,#0x50           ;187
0000b6  a074              ADR      r0,|L8.648|
0000b8  f7fffffe          BL       __2printf
0000bc  f8941070          LDRB     r1,[r4,#0x70]         ;189
0000c0  a079              ADR      r0,|L8.680|
0000c2  f7fffffe          BL       __2printf
0000c6  7b61              LDRB     r1,[r4,#0xd]          ;191
0000c8  7be3              LDRB     r3,[r4,#0xf]          ;191
0000ca  7ba2              LDRB     r2,[r4,#0xe]          ;191
0000cc  e88d000e          STM      sp,{r1-r3}            ;191
0000d0  7b23              LDRB     r3,[r4,#0xc]          ;191
0000d2  7ae2              LDRB     r2,[r4,#0xb]          ;191
0000d4  7aa1              LDRB     r1,[r4,#0xa]          ;191
0000d6  a07c              ADR      r0,|L8.712|
0000d8  f7fffffe          BL       __2printf
0000dc  e8bd403e          POP      {r1-r5,lr}            ;193
0000e0  a00b              ADR      r0,|L8.272|
0000e2  f7ffbffe          B.W      __2printf
                  |L8.230|
0000e6  f7fffffe          BL       __2printf
0000ea  a07f              ADR      r0,|L8.744|
0000ec  e7ae              B        |L8.76|
;;;196    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L8.240|
0000f0  436d6420          DCB      "Cmd executed failed! (result!=1)"
0000f4  65786563
0000f8  75746564
0000fc  20666169
000100  6c656421
000104  20287265
000108  73756c74
00010c  213d3129
                  |L8.272|
000110  0a0d00            DCB      "\n\r",0
000113  00                DCB      0
                  |L8.276|
000114  204d6f64          DCB      " Mode ................... Master\n\r",0
000118  65202e2e
00011c  2e2e2e2e
000120  2e2e2e2e
000124  2e2e2e2e
000128  2e2e2e2e
00012c  2e204d61
000130  73746572
000134  0a0d00  
000137  00                DCB      0
                  |L8.312|
000138  204d4143          DCB      " MAC Address ............ %02x-%02x-%02x-%02x-%02x-%02x"
00013c  20416464
000140  72657373
000144  202e2e2e
000148  2e2e2e2e
00014c  2e2e2e2e
000150  2e202530
000154  32782d25
000158  3032782d
00015c  25303278
000160  2d253032
000164  782d2530
000168  32782d25
00016c  303278  
00016f  0a0d00            DCB      "\n\r",0
000172  00                DCB      0
000173  00                DCB      0
                  |L8.372|
000174  204d6f64          DCB      " Mode ................... Terminal(not authenticated)\n"
000178  65202e2e
00017c  2e2e2e2e
000180  2e2e2e2e
000184  2e2e2e2e
000188  2e2e2e2e
00018c  2e205465
000190  726d696e
000194  616c286e
000198  6f742061
00019c  75746865
0001a0  6e746963
0001a4  61746564
0001a8  290a    
0001aa  0d00              DCB      "\r",0
                  |L8.428|
0001ac  204d6173          DCB      " Master MAC Address ..... %02x-%02x-%02x-%02x-%02x-%02x"
0001b0  74657220
0001b4  4d414320
0001b8  41646472
0001bc  65737320
0001c0  2e2e2e2e
0001c4  2e202530
0001c8  32782d25
0001cc  3032782d
0001d0  25303278
0001d4  2d253032
0001d8  782d2530
0001dc  32782d25
0001e0  303278  
0001e3  0a0d00            DCB      "\n\r",0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L8.488|
0001e8  20526567          DCB      " Registered Info ........ %d\n\r",0
0001ec  69737465
0001f0  72656420
0001f4  496e666f
0001f8  202e2e2e
0001fc  2e2e2e2e
000200  2e202564
000204  0a0d00  
000207  00                DCB      0
                  |L8.520|
000208  20457468          DCB      " Ether LinkUp ........... %d\n\r",0
00020c  6572204c
000210  696e6b55
000214  70202e2e
000218  2e2e2e2e
00021c  2e2e2e2e
000220  2e202564
000224  0a0d00  
000227  00                DCB      0
                  |L8.552|
000228  20457468          DCB      " Ether SpdDpx ........... %d\n\r",0
00022c  65722053
000230  70644470
000234  78202e2e
000238  2e2e2e2e
00023c  2e2e2e2e
000240  2e202564
000244  0a0d00  
000247  00                DCB      0
                  |L8.584|
000248  204d756c          DCB      " Multiple Mode .......... %d\n\r",0
00024c  7469706c
000250  65204d6f
000254  6465202e
000258  2e2e2e2e
00025c  2e2e2e2e
000260  2e202564
000264  0a0d00  
000267  00                DCB      0
                  |L8.616|
000268  204d6169          DCB      " Main Version ........... %s\n\r",0
00026c  6e205665
000270  7273696f
000274  6e202e2e
000278  2e2e2e2e
00027c  2e2e2e2e
000280  2e202573
000284  0a0d00  
000287  00                DCB      0
                  |L8.648|
000288  20426f6f          DCB      " Boot Version ........... %s\n\r",0
00028c  74205665
000290  7273696f
000294  6e202e2e
000298  2e2e2e2e
00029c  2e2e2e2e
0002a0  2e202573
0002a4  0a0d00  
0002a7  00                DCB      0
                  |L8.680|
0002a8  20426561          DCB      " Beacon Status .......... %d\n\r",0
0002ac  636f6e20
0002b0  53746174
0002b4  7573202e
0002b8  2e2e2e2e
0002bc  2e2e2e2e
0002c0  2e202564
0002c4  0a0d00  
0002c7  00                DCB      0
                  |L8.712|
0002c8  0a0d2431          DCB      "\n\r$$1%02x%02x%02x%02x%02x%02x\n\r",0
0002cc  25303278
0002d0  25303278
0002d4  25303278
0002d8  25303278
0002dc  25303278
0002e0  25303278
0002e4  0a0d00  
0002e7  00                DCB      0
                  |L8.744|
0002e8  204d6f64          DCB      " Mode ................... Terminal(authenticated)\n\r",0
0002ec  65202e2e
0002f0  2e2e2e2e
0002f4  2e2e2e2e
0002f8  2e2e2e2e
0002fc  2e2e2e2e
000300  2e205465
000304  726d696e
000308  616c2861
00030c  75746865
000310  6e746963
000314  61746564
000318  290a0d00

                          AREA ||i.print_StartChannelEstimate||, CODE, READONLY, ALIGN=2

                  print_StartChannelEstimate PROC
;;;588    
;;;589    int print_StartChannelEstimate(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b510              PUSH     {r4,lr}
;;;590    {
;;;591    	T_HDPLC_EXTCMD_START_CHANNELESTIMATE_CNF *theCnf;
;;;592    
;;;593    	theCnf = (T_HDPLC_EXTCMD_START_CHANNELESTIMATE_CNF *)GetCmdBody(inPlc);
000002  6800              LDR      r0,[r0,#0]
;;;594    	if (theCnf->result != 0)
000004  7f00              LDRB     r0,[r0,#0x1c]
000006  b120              CBZ      r0,|L9.18|
;;;595    	{
;;;596    		printf("StartChannelEstimate result!=0 failure!!\n\r");
000008  a004              ADR      r0,|L9.28|
00000a  f7fffffe          BL       __2printf
;;;597    		return D_RETURN_FAILURE;
00000e  2000              MOVS     r0,#0
;;;598    	}
;;;599    	printf("Execute StartChannelEstimate command successfully!\n\r");
;;;600    }
000010  bd10              POP      {r4,pc}
                  |L9.18|
000012  e8bd4010          POP      {r4,lr}               ;599
000016  a00c              ADR      r0,|L9.72|
000018  f7ffbffe          B.W      __2printf
;;;601    
                          ENDP

                  |L9.28|
00001c  53746172          DCB      "StartChannelEstimate result!=0 failure!!\n\r",0
000020  74436861
000024  6e6e656c
000028  45737469
00002c  6d617465
000030  20726573
000034  756c7421
000038  3d302066
00003c  61696c75
000040  72652121
000044  0a0d00  
000047  00                DCB      0
                  |L9.72|
000048  45786563          DCB      "Execute StartChannelEstimate command successfully!\n\r",0
00004c  75746520
000050  53746172
000054  74436861
000058  6e6e656c
00005c  45737469
000060  6d617465
000064  20636f6d
000068  6d616e64
00006c  20737563
000070  63657373
000074  66756c6c
000078  79210a0d
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.print_StartSpeedTest||, CODE, READONLY, ALIGN=2

                  print_StartSpeedTest PROC
;;;231    
;;;232    int print_StartSpeedTest(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b510              PUSH     {r4,lr}
;;;233    {
;;;234    	T_HDPLC_EXTCMD_START_SPEEDTEST_CNF *theCnf;
;;;235    
;;;236    	theCnf = (T_HDPLC_EXTCMD_START_SPEEDTEST_CNF *)GetCmdBody(inPlc);
000002  6800              LDR      r0,[r0,#0]
;;;237    	if (theCnf->result != 0)
000004  7f00              LDRB     r0,[r0,#0x1c]
000006  b120              CBZ      r0,|L10.18|
;;;238    	{
;;;239    		printf("StartSpeedTest result!=0 failure!!\n\r");
000008  a004              ADR      r0,|L10.28|
00000a  f7fffffe          BL       __2printf
;;;240    		return D_RETURN_FAILURE;
00000e  2000              MOVS     r0,#0
;;;241    	}
;;;242    	printf("Execute speedtest command successfully!\n\r");
;;;243    }
000010  bd10              POP      {r4,pc}
                  |L10.18|
000012  e8bd4010          POP      {r4,lr}               ;242
000016  a00b              ADR      r0,|L10.68|
000018  f7ffbffe          B.W      __2printf
;;;244    
                          ENDP

                  |L10.28|
00001c  53746172          DCB      "StartSpeedTest result!=0 failure!!\n\r",0
000020  74537065
000024  65645465
000028  73742072
00002c  6573756c
000030  74213d30
000034  20666169
000038  6c757265
00003c  21210a0d
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0
                  |L10.68|
000044  45786563          DCB      "Execute speedtest command successfully!\n\r",0
000048  75746520
00004c  73706565
000050  64746573
000054  7420636f
000058  6d6d616e
00005c  64207375
000060  63636573
000064  7366756c
000068  6c79210a
00006c  0d00    
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.print_SystemCmd||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  print_SystemCmd PROC
;;;409    
;;;410    int print_SystemCmd(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b510              PUSH     {r4,lr}
;;;411    {
;;;412    	 T_HDPLC_EXTCMD_SYSTEMCMD_CNF	*theCnf;
;;;413    
;;;414    	 theCnf=(T_HDPLC_EXTCMD_SYSTEMCMD_CNF *)GetCmdBody(inPlc);
000002  6804              LDR      r4,[r0,#0]
;;;415    
;;;416    	 printf("\n\r");
000004  a00a              ADR      r0,|L11.48|
000006  341c              ADDS     r4,r4,#0x1c           ;414
000008  f7fffffe          BL       __2printf
;;;417    	 printf("System Command Result Length:%d\n\r",strlen(theCnf->result));
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strlen
000012  4601              MOV      r1,r0
000014  a007              ADR      r0,|L11.52|
000016  f7fffffe          BL       __2printf
;;;418    	 printf("System Command Result:%s\n\n\r", theCnf->result);
00001a  4621              MOV      r1,r4
00001c  a00e              ADR      r0,|L11.88|
00001e  f7fffffe          BL       __2printf
;;;419    	 printf("$2%s\n\n\r", theCnf->result);
000022  4621              MOV      r1,r4
000024  a013              ADR      r0,|L11.116|
000026  f7fffffe          BL       __2printf
;;;420    
;;;421    	 return D_RETURN_SUCCESS;
00002a  2001              MOVS     r0,#1
;;;422    }
00002c  bd10              POP      {r4,pc}
;;;423    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
000030  0a0d00            DCB      "\n\r",0
000033  00                DCB      0
                  |L11.52|
000034  53797374          DCB      "System Command Result Length:%d\n\r",0
000038  656d2043
00003c  6f6d6d61
000040  6e642052
000044  6573756c
000048  74204c65
00004c  6e677468
000050  3a25640a
000054  0d00    
000056  00                DCB      0
000057  00                DCB      0
                  |L11.88|
000058  53797374          DCB      "System Command Result:%s\n\n\r",0
00005c  656d2043
000060  6f6d6d61
000064  6e642052
000068  6573756c
00006c  743a2573
000070  0a0a0d00
                  |L11.116|
000074  24322573          DCB      "$$2%s\n\n\r",0
000078  0a0a0d00

                          AREA ||i.replaceChar||, CODE, READONLY, ALIGN=1

                  replaceChar PROC
;;;342    
;;;343    void replaceChar(unsigned char *str)	 // replace '*' with space
000000  b570              PUSH     {r4-r6,lr}
;;;344    {
000002  4605              MOV      r5,r0
;;;345    	int len,i=0;
000004  2400              MOVS     r4,#0
;;;346    	len=strlen(str);
000006  f7fffffe          BL       strlen
;;;347    	while(str[i]!='\0')
;;;348    	{
;;;349    		if(str[i]=='*')str[i]=' ';
00000a  2120              MOVS     r1,#0x20
;;;350    		i++;
00000c  e003              B        |L12.22|
                  |L12.14|
00000e  282a              CMP      r0,#0x2a              ;349
000010  d100              BNE      |L12.20|
000012  5529              STRB     r1,[r5,r4]            ;349
                  |L12.20|
000014  1c64              ADDS     r4,r4,#1
                  |L12.22|
000016  5d28              LDRB     r0,[r5,r4]            ;347
000018  2800              CMP      r0,#0                 ;347
00001a  d1f8              BNE      |L12.14|
;;;351    	}
;;;352    }
00001c  bd70              POP      {r4-r6,pc}
;;;353    
                          ENDP


                          AREA ||i.run_GetAllMessages||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  run_GetAllMessages PROC
;;;429    
;;;430    int run_GetAllMessages(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;431    {
000004  4681              MOV      r9,r0
;;;432    	int i;
;;;433    	unsigned char *str1="uf_phyrate get ";
;;;434    	unsigned char *str2=" -mbps";
;;;435    
;;;436    	T_HDPLC_EXTCMD_SYSTEMCMD_REQ	*theReq;
;;;437    	unsigned char *theBuf; 	
;;;438    
;;;439    	if(circle_state==0&&ini_flag==1)
000006  4826              LDR      r0,|L13.160|
000008  4e26              LDR      r6,|L13.164|
00000a  a31f              ADR      r3,|L13.136|
00000c  6801              LDR      r1,[r0,#0]  ; circle_state
00000e  6830              LDR      r0,[r6,#0]
000010  a521              ADR      r5,|L13.152|
000012  2400              MOVS     r4,#0
000014  b159              CBZ      r1,|L13.46|
;;;440    	{
;;;441    		 //printf("Please input system command -->");
;;;442    		 //scanf("%s",inMac);
;;;443    		 for(i=0;i<12;i++)
;;;444    		 {
;;;445    		 	inMac[i]=inStr[i+1];
;;;446    		 }
;;;447    		 inMac[i]='\0';
;;;448    
;;;449    		 strcpy(inCmd,str1);
;;;450    		 strcat(inCmd,inMac);
;;;451    		 strcat(inCmd,str2);
;;;452    		 printf("\n\r");
;;;453    		 //replaceChar(inCmd);
;;;454    		 printf("system command:%s\n\r",inCmd);
;;;455    
;;;456    		 Initialize(inPlc,D_COM_GET_STATUS,sizeof(T_HDPLC_EXTCMD_GET_STATUS_REQ));
;;;457    		 ini_flag=0;
;;;458    
;;;459    	}else if(circle_state==1&&ini_flag==1)
000016  2901              CMP      r1,#1
000018  d107              BNE      |L13.42|
00001a  2801              CMP      r0,#1
00001c  d105              BNE      |L13.42|
;;;460    	{
;;;461    		  run_SysGetPhyRate(inPlc);
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       run_SysGetPhyRate
;;;462    
;;;463    		  ini_flag=0;
;;;464    		  rec_flag=0;		 
000024  4820              LDR      r0,|L13.168|
000026  6034              STR      r4,[r6,#0]  ; ini_flag
                  |L13.40|
000028  6004              STR      r4,[r0,#0]            ;457  ; ini_flag
                  |L13.42|
;;;465    	}
;;;466    
;;;467    }
00002a  e8bd87f0          POP      {r4-r10,pc}
                  |L13.46|
00002e  46b0              MOV      r8,r6                 ;439
000030  2801              CMP      r0,#1                 ;439
000032  d1fa              BNE      |L13.42|
000034  4f1d              LDR      r7,|L13.172|
000036  4a1e              LDR      r2,|L13.176|
000038  2000              MOVS     r0,#0                 ;443
                  |L13.58|
00003a  1839              ADDS     r1,r7,r0              ;445
00003c  784e              LDRB     r6,[r1,#1]            ;445
00003e  1c41              ADDS     r1,r0,#1              ;443
000040  5416              STRB     r6,[r2,r0]            ;445
000042  4608              MOV      r0,r1                 ;443
000044  290c              CMP      r1,#0xc               ;443
000046  dbf8              BLT      |L13.58|
000048  4819              LDR      r0,|L13.176|
00004a  5454              STRB     r4,[r2,r1]            ;447
00004c  4619              MOV      r1,r3                 ;449
00004e  3864              SUBS     r0,r0,#0x64           ;449
000050  f7fffffe          BL       strcpy
000054  4916              LDR      r1,|L13.176|
000056  f1a10064          SUB      r0,r1,#0x64           ;450
00005a  f7fffffe          BL       strcat
00005e  4814              LDR      r0,|L13.176|
000060  4629              MOV      r1,r5                 ;451
000062  3864              SUBS     r0,r0,#0x64           ;451
000064  f7fffffe          BL       strcat
000068  a012              ADR      r0,|L13.180|
00006a  f7fffffe          BL       __2printf
00006e  4910              LDR      r1,|L13.176|
000070  a011              ADR      r0,|L13.184|
000072  3964              SUBS     r1,r1,#0x64           ;454
000074  f7fffffe          BL       __2printf
000078  2204              MOVS     r2,#4                 ;456
00007a  f24a1140          MOV      r1,#0xa140            ;456
00007e  4648              MOV      r0,r9                 ;456
000080  f7fffffe          BL       Initialize
000084  4640              MOV      r0,r8                 ;457
000086  e7cf              B        |L13.40|
;;;468    
                          ENDP

                  |L13.136|
000088  75665f70          DCB      "uf_phyrate get ",0
00008c  68797261
000090  74652067
000094  65742000
                  |L13.152|
000098  202d6d62          DCB      " -mbps",0
00009c  707300  
00009f  00                DCB      0
                  |L13.160|
                          DCD      circle_state
                  |L13.164|
                          DCD      ini_flag
                  |L13.168|
                          DCD      rec_flag
                  |L13.172|
                          DCD      inStr
                  |L13.176|
                          DCD      ||.bss||+0x64
                  |L13.180|
0000b4  0a0d00            DCB      "\n\r",0
0000b7  00                DCB      0
                  |L13.184|
0000b8  73797374          DCB      "system command:%s\n\r",0
0000bc  656d2063
0000c0  6f6d6d61
0000c4  6e643a25
0000c8  730a0d00

                          AREA ||i.run_GetCINRMap2To28||, CODE, READONLY, ALIGN=1

                  run_GetCINRMap2To28 PROC
;;;601    
;;;602    int run_GetCINRMap2To28(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  2204              MOVS     r2,#4
;;;603    {
;;;604    	Initialize(inPlc,D_COM_GET_CINRMAP_2TO28,sizeof(T_HDPLC_EXTCMD_GET_CINRMAP_2TO28_REQ));
000002  f24a6130          MOV      r1,#0xa630
000006  f7ffbffe          B.W      Initialize
;;;605    }
;;;606    
                          ENDP


                          AREA ||i.run_GetPhyRate||, CODE, READONLY, ALIGN=1

                  run_GetPhyRate PROC
;;;248    
;;;249    int run_GetPhyRate(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b510              PUSH     {r4,lr}
;;;250    {
;;;251    	int ret;
;;;252    
;;;253    	ret=Initialize(inPlc,D_COM_GET_PHY_RATE,sizeof(T_HDPLC_EXTCMD_GET_PHY_RATE_REQ));
000002  2204              MOVS     r2,#4
000004  f44f51b8          MOV      r1,#0x1700
000008  f7fffffe          BL       Initialize
;;;254    	if(ret == D_RETURN_SUCCESS)
00000c  2801              CMP      r0,#1
00000e  d000              BEQ      |L15.18|
;;;255    	{
;;;256    		return D_RETURN_SUCCESS;
;;;257    	}else
;;;258    	return D_RETURN_FAILURE;
000010  2000              MOVS     r0,#0
                  |L15.18|
;;;259    }
000012  bd10              POP      {r4,pc}
;;;260    
                          ENDP


                          AREA ||i.run_GetStatus||, CODE, READONLY, ALIGN=1

                  run_GetStatus PROC
;;;128    
;;;129    int run_GetStatus(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b510              PUSH     {r4,lr}
;;;130    {
;;;131    	
;;;132    	T_HDPLC_EXTCMD_GET_STATUS_REQ *theReq;
;;;133    	
;;;134    	if(Initialize(inPlc,D_COM_GET_STATUS,sizeof(T_HDPLC_EXTCMD_GET_STATUS_REQ)) == D_RETURN_SUCCESS)
000002  2204              MOVS     r2,#4
000004  f24a1140          MOV      r1,#0xa140
000008  f7fffffe          BL       Initialize
00000c  2801              CMP      r0,#1
00000e  d000              BEQ      |L16.18|
;;;135    	{
;;;136    		theReq = (T_HDPLC_EXTCMD_GET_STATUS_REQ *)GetCmdBody(inPlc);
;;;137    		return D_RETURN_SUCCESS;
;;;138    	}else
;;;139    	return D_RETURN_FAILURE;
000010  2000              MOVS     r0,#0
                  |L16.18|
;;;140    }
000012  bd10              POP      {r4,pc}
;;;141    
                          ENDP


                          AREA ||i.run_SetMacAddress||, CODE, READONLY, ALIGN=2

                  run_SetMacAddress PROC
;;;516    
;;;517    int run_SetMacAddress(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;518    {
000004  4607              MOV      r7,r0
;;;519    	int i;
;;;520    
;;;521    	if(circle_state==0&&ini_flag==1)
000006  4824              LDR      r0,|L17.152|
000008  4d24              LDR      r5,|L17.156|
00000a  2400              MOVS     r4,#0
00000c  6801              LDR      r1,[r0,#0]  ; circle_state
00000e  6828              LDR      r0,[r5,#0]
000010  b169              CBZ      r1,|L17.46|
;;;522    	{
;;;523    		 //printf("Please input system command -->");
;;;524    		 //scanf("%s",inMac);
;;;525    		 for(i=0;i<12;i++)
;;;526    		 {
;;;527    		 	inMac[i]=inStr[i+1];
;;;528    		 }
;;;529    		 inMac[i]='\0';
;;;530    
;;;531    		 strcpy(inCmd,"uf_factorypwd set newpassword 0123456789");
;;;532    		 printf("\n\r");
;;;533    
;;;534    		 run_SetMacAddressSub(inPlc,inCmd);
;;;535    
;;;536    		 ini_flag=0;
;;;537    
;;;538    	}else if(circle_state==1&&ini_flag==1)
;;;539    	{
;;;540    		  strcpy(inCmd,"uf_restoremac set 0123456789");
;;;541    		  printf("\n\r");
;;;542    		  run_SetMacAddressSub(inPlc,inCmd);
;;;543    
;;;544    		  ini_flag=0;
;;;545    		  rec_flag=0;		 
000012  4e23              LDR      r6,|L17.160|
000014  2901              CMP      r1,#1                 ;538
000016  d026              BEQ      |L17.102|
;;;546    	}else if(circle_state==2&&ini_flag==1)
000018  2902              CMP      r1,#2
00001a  d028              BEQ      |L17.110|
;;;547    	{
;;;548    		  strcpy(inCmd,"uf_mac set ");
;;;549    		  strcat(inCmd,inMac);
;;;550    		  printf("\n\r");
;;;551    		  run_SetMacAddressSub(inPlc,inCmd);
;;;552    		  
;;;553    		  ini_flag=0;
;;;554    		  rec_flag=0;		  
;;;555    	}else if(circle_state==3&&ini_flag==1)
00001c  2903              CMP      r1,#3
00001e  d120              BNE      |L17.98|
000020  2801              CMP      r0,#1
000022  d11e              BNE      |L17.98|
;;;556    	{
;;;557    		  strcpy(inCmd,"ul_reset");
000024  a11f              ADR      r1,|L17.164|
                  |L17.38|
000026  4822              LDR      r0,|L17.176|
000028  f7fffffe          BL       strcpy
00002c  e02a              B        |L17.132|
                  |L17.46|
00002e  2801              CMP      r0,#1                 ;521
000030  d117              BNE      |L17.98|
000032  491f              LDR      r1,|L17.176|
000034  2000              MOVS     r0,#0                 ;525
000036  4a1f              LDR      r2,|L17.180|
000038  3164              ADDS     r1,r1,#0x64           ;527
                  |L17.58|
00003a  1813              ADDS     r3,r2,r0              ;527
00003c  1c46              ADDS     r6,r0,#1              ;525
00003e  785b              LDRB     r3,[r3,#1]            ;527
000040  540b              STRB     r3,[r1,r0]            ;527
000042  4630              MOV      r0,r6                 ;525
000044  2e0c              CMP      r6,#0xc               ;525
000046  dbf8              BLT      |L17.58|
000048  558c              STRB     r4,[r1,r6]            ;529
00004a  a11b              ADR      r1,|L17.184|
00004c  4818              LDR      r0,|L17.176|
00004e  f7fffffe          BL       strcpy
000052  a024              ADR      r0,|L17.228|
000054  f7fffffe          BL       __2printf
000058  4915              LDR      r1,|L17.176|
00005a  4638              MOV      r0,r7                 ;534
00005c  f7fffffe          BL       run_SetMacAddressSub
000060  602c              STR      r4,[r5,#0]            ;536  ; ini_flag
                  |L17.98|
;;;558    		  printf("\n\r");
;;;559    		  run_SetMacAddressSub(inPlc,inCmd);
;;;560    
;;;561    		  ini_flag=0;
;;;562    		  rec_flag=0;
;;;563    	}
;;;564    }
000062  e8bd81f0          POP      {r4-r8,pc}
                  |L17.102|
000066  2801              CMP      r0,#1                 ;538
000068  d1fb              BNE      |L17.98|
00006a  a11f              ADR      r1,|L17.232|
00006c  e7db              B        |L17.38|
                  |L17.110|
00006e  2801              CMP      r0,#1                 ;546
000070  d1f7              BNE      |L17.98|
000072  a125              ADR      r1,|L17.264|
000074  480e              LDR      r0,|L17.176|
000076  f7fffffe          BL       strcpy
00007a  490d              LDR      r1,|L17.176|
00007c  480c              LDR      r0,|L17.176|
00007e  3164              ADDS     r1,r1,#0x64           ;549
000080  f7fffffe          BL       strcat
                  |L17.132|
000084  a017              ADR      r0,|L17.228|
000086  f7fffffe          BL       __2printf
00008a  4909              LDR      r1,|L17.176|
00008c  4638              MOV      r0,r7                 ;542
00008e  f7fffffe          BL       run_SetMacAddressSub
000092  602c              STR      r4,[r5,#0]            ;545  ; ini_flag
000094  6034              STR      r4,[r6,#0]            ;545  ; rec_flag
000096  e7e4              B        |L17.98|
;;;565    
                          ENDP

                  |L17.152|
                          DCD      circle_state
                  |L17.156|
                          DCD      ini_flag
                  |L17.160|
                          DCD      rec_flag
                  |L17.164|
0000a4  756c5f72          DCB      "ul_reset",0
0000a8  65736574
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L17.176|
                          DCD      ||.bss||
                  |L17.180|
                          DCD      inStr
                  |L17.184|
0000b8  75665f66          DCB      "uf_factorypwd set newpassword 0123456789",0
0000bc  6163746f
0000c0  72797077
0000c4  64207365
0000c8  74206e65
0000cc  77706173
0000d0  73776f72
0000d4  64203031
0000d8  32333435
0000dc  36373839
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L17.228|
0000e4  0a0d00            DCB      "\n\r",0
0000e7  00                DCB      0
                  |L17.232|
0000e8  75665f72          DCB      "uf_restoremac set 0123456789",0
0000ec  6573746f
0000f0  72656d61
0000f4  63207365
0000f8  74203031
0000fc  32333435
000100  36373839
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0
                  |L17.264|
000108  75665f6d          DCB      "uf_mac set ",0
00010c  61632073
000110  65742000

                          AREA ||i.run_SetMacAddressSub||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  run_SetMacAddressSub PROC
;;;473    
;;;474    int run_SetMacAddressSub(struct C_HDPLC_EXTCMD_IF *inPlc,unsigned char* setmac_cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;475    {
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;476    	T_HDPLC_EXTCMD_SYSTEMCMD_REQ	*theReq;
;;;477    	int ret;
;;;478    	unsigned char *theBuf;
;;;479    
;;;480    	int theLen;
;;;481    	int theRem;
;;;482    	int i;
;;;483    	
;;;484    	ret=Initialize(inPlc,D_COM_SYSTEMCMD,sizeof(T_HDPLC_EXTCMD_SYSTEMCMD_REQ));
000006  f44f6280          MOV      r2,#0x400
00000a  f64d71f0          MOV      r1,#0xdff0
00000e  f7fffffe          BL       Initialize
;;;485    	if(ret == D_RETURN_SUCCESS)
000012  2801              CMP      r0,#1
000014  d001              BEQ      |L18.26|
;;;486    	{
;;;487    		theReq=(T_HDPLC_EXTCMD_SYSTEMCMD_REQ *)GetCmdBody(inPlc);
;;;488    		theBuf=theReq->cmdline;
;;;489    
;;;490    		printf("\n\r");
;;;491    		strcpy(theBuf,setmac_cmd);
;;;492    		printf("system command:%s\n\r",theBuf);
;;;493    
;;;494    		theLen=strlen((char *)theReq->cmdline)+1;
;;;495    		theRem=4-(theLen%4);
;;;496    		if(theRem!=4)
;;;497    		{
;;;498    			for(i=0;i<theRem;i++)
;;;499    			{
;;;500    				theReq->cmdline[theLen+i]=0xff;
;;;501    			}
;;;502    			inPlc->m_pCmdData->cmdlength = 8+sizeof(char)*theLen+theRem;
;;;503    			inPlc->m_pCmdData->length = (unsigned short)(16+sizeof(char)*theLen+theRem);
;;;504    		}else
;;;505    		{
;;;506    			inPlc->m_pCmdData->cmdlength = 8+sizeof(char)*theLen;
;;;507    			inPlc->m_pCmdData->length = (unsigned short)(16+sizeof(char)*theLen);
;;;508    		}
;;;509    
;;;510    		return D_RETURN_SUCCESS;
;;;511    
;;;512    	}else
;;;513    	return D_RETURN_FAILURE;
000016  2000              MOVS     r0,#0
;;;514    }
000018  bd70              POP      {r4-r6,pc}
                  |L18.26|
00001a  682c              LDR      r4,[r5,#0]            ;487
00001c  a015              ADR      r0,|L18.116|
00001e  341c              ADDS     r4,r4,#0x1c           ;487
000020  f7fffffe          BL       __2printf
000024  4631              MOV      r1,r6                 ;491
000026  4620              MOV      r0,r4                 ;491
000028  f7fffffe          BL       strcpy
00002c  4621              MOV      r1,r4                 ;492
00002e  a012              ADR      r0,|L18.120|
000030  f7fffffe          BL       __2printf
000034  4620              MOV      r0,r4                 ;494
000036  f7fffffe          BL       strlen
00003a  1c40              ADDS     r0,r0,#1              ;494
00003c  17c1              ASRS     r1,r0,#31             ;495
00003e  eb007191          ADD      r1,r0,r1,LSR #30      ;495
000042  f0210103          BIC      r1,r1,#3              ;495
000046  1a41              SUBS     r1,r0,r1              ;495
000048  f1c10204          RSB      r2,r1,#4              ;495
00004c  2a04              CMP      r2,#4                 ;496
00004e  d008              BEQ      |L18.98|
000050  2100              MOVS     r1,#0                 ;498
000052  23ff              MOVS     r3,#0xff              ;500
000054  e002              B        |L18.92|
                  |L18.86|
000056  1846              ADDS     r6,r0,r1              ;500
000058  1c49              ADDS     r1,r1,#1              ;498
00005a  55a3              STRB     r3,[r4,r6]            ;500
                  |L18.92|
00005c  4291              CMP      r1,r2                 ;498
00005e  dbfa              BLT      |L18.86|
000060  4410              ADD      r0,r0,r2              ;502
                  |L18.98|
000062  682a              LDR      r2,[r5,#0]            ;506
000064  f1000108          ADD      r1,r0,#8              ;506
000068  3010              ADDS     r0,r0,#0x10           ;507
00006a  6111              STR      r1,[r2,#0x10]         ;507
00006c  6829              LDR      r1,[r5,#0]            ;507
00006e  8148              STRH     r0,[r1,#0xa]          ;507
000070  2001              MOVS     r0,#1                 ;510
000072  bd70              POP      {r4-r6,pc}
;;;515    
                          ENDP

                  |L18.116|
000074  0a0d00            DCB      "\n\r",0
000077  00                DCB      0
                  |L18.120|
000078  73797374          DCB      "system command:%s\n\r",0
00007c  656d2063
000080  6f6d6d61
000084  6e643a25
000088  730a0d00

                          AREA ||i.run_StartChannelEstimate||, CODE, READONLY, ALIGN=2

                  run_StartChannelEstimate PROC
;;;568    /*CINR related difinitions*/
;;;569    int run_StartChannelEstimate(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b570              PUSH     {r4-r6,lr}
;;;570    {
000002  4604              MOV      r4,r0
;;;571    	int i;
;;;572    	T_HDPLC_EXTCMD_START_CHANNELESTIMATE_REQ *theReq;
;;;573    
;;;574    	Initialize(inPlc,D_COM_START_CHANNELESTIMATE,sizeof(T_HDPLC_EXTCMD_START_CHANNELESTIMATE_REQ));
000004  2208              MOVS     r2,#8
000006  f24a01e0          MOV      r1,#0xa0e0
00000a  f7fffffe          BL       Initialize
;;;575    	theReq=(T_HDPLC_EXTCMD_START_CHANNELESTIMATE_REQ *)GetCmdBody(inPlc);
00000e  6821              LDR      r1,[r4,#0]
;;;576    
;;;577    	for(i=0;i<12;i++)
;;;578    	{
;;;579    	 	inMac[i]=inStr[i+1];
000010  4c08              LDR      r4,|L19.52|
000012  311c              ADDS     r1,r1,#0x1c           ;575
000014  4a08              LDR      r2,|L19.56|
000016  2000              MOVS     r0,#0                 ;577
                  |L19.24|
000018  1823              ADDS     r3,r4,r0
00001a  785d              LDRB     r5,[r3,#1]
00001c  1c43              ADDS     r3,r0,#1              ;577
00001e  5415              STRB     r5,[r2,r0]
000020  4618              MOV      r0,r3                 ;577
000022  2b0c              CMP      r3,#0xc               ;577
000024  dbf8              BLT      |L19.24|
;;;580    	}
;;;581    	inMac[i]='\0';
000026  2300              MOVS     r3,#0
000028  5413              STRB     r3,[r2,r0]
;;;582    	
;;;583    	String2Hex(inMac,(char *)theReq->macAddr);
00002a  4803              LDR      r0,|L19.56|
00002c  f7fffffe          BL       String2Hex
;;;584    
;;;585    	return D_RETURN_SUCCESS;
000030  2001              MOVS     r0,#1
;;;586    		
;;;587    }
000032  bd70              POP      {r4-r6,pc}
;;;588    
                          ENDP

                  |L19.52|
                          DCD      inStr
                  |L19.56|
                          DCD      ||.bss||+0x64

                          AREA ||i.run_StartSpeedTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  run_StartSpeedTest PROC
;;;199    
;;;200    int run_StartSpeedTest(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b570              PUSH     {r4-r6,lr}
;;;201    {
000002  b090              SUB      sp,sp,#0x40
000004  4605              MOV      r5,r0
;;;202    	T_HDPLC_EXTCMD_START_SPEEDTEST_REQ *theReq;
;;;203    	int ret;
;;;204    	char theBuf[64];
;;;205    	char c;
;;;206    	int i=0;
000006  2400              MOVS     r4,#0
;;;207    
;;;208    
;;;209    	ret=Initialize(inPlc,D_COM_START_SPEEDTEST,sizeof(T_HDPLC_EXTCMD_START_SPEEDTEST_REQ));
000008  2208              MOVS     r2,#8
00000a  f24a01c0          MOV      r1,#0xa0c0
00000e  f7fffffe          BL       Initialize
;;;210    	if(ret == D_RETURN_SUCCESS)
000012  2801              CMP      r0,#1
000014  d002              BEQ      |L20.28|
;;;211    	{
;;;212    		theReq = (T_HDPLC_EXTCMD_START_SPEEDTEST_REQ *)GetCmdBody(inPlc);
;;;213    		printf("Please enter Mac address (6Byte) -->");
;;;214    		//gets(theBuf);
;;;215    		
;;;216    		while((c=getc(stdin))!=13)
;;;217    		{
;;;218    			 theBuf[i]=c;
;;;219    			 printf("%c",c);
;;;220    			 i++;
;;;221    		}
;;;222    		theBuf[i]='\0';
;;;223    		printf("\n\r");
;;;224    
;;;225    		String2Hex(theBuf,(char *)theReq->macAddr);
;;;226    		
;;;227    		return D_RETURN_SUCCESS;
;;;228    	}else
;;;229    	return D_RETURN_FAILURE;
000016  2000              MOVS     r0,#0
                  |L20.24|
;;;230    }
000018  b010              ADD      sp,sp,#0x40
00001a  bd70              POP      {r4-r6,pc}
                  |L20.28|
00001c  682e              LDR      r6,[r5,#0]            ;212
00001e  a00e              ADR      r0,|L20.88|
000020  361c              ADDS     r6,r6,#0x1c           ;212
000022  f7fffffe          BL       __2printf
000026  466d              MOV      r5,sp                 ;204
000028  e004              B        |L20.52|
                  |L20.42|
00002a  5529              STRB     r1,[r5,r4]            ;218
00002c  a014              ADR      r0,|L20.128|
00002e  f7fffffe          BL       __2printf
000032  1c64              ADDS     r4,r4,#1              ;220
                  |L20.52|
000034  4813              LDR      r0,|L20.132|
000036  f7fffffe          BL       getc
00003a  b2c1              UXTB     r1,r0                 ;216
00003c  290d              CMP      r1,#0xd               ;216
00003e  d1f4              BNE      |L20.42|
000040  2000              MOVS     r0,#0                 ;222
000042  5528              STRB     r0,[r5,r4]            ;222
000044  a010              ADR      r0,|L20.136|
000046  f7fffffe          BL       __2printf
00004a  4631              MOV      r1,r6                 ;225
00004c  4668              MOV      r0,sp                 ;225
00004e  f7fffffe          BL       String2Hex
000052  2001              MOVS     r0,#1                 ;227
000054  e7e0              B        |L20.24|
;;;231    
                          ENDP

000056  0000              DCW      0x0000
                  |L20.88|
000058  506c6561          DCB      "Please enter Mac address (6Byte) -->",0
00005c  73652065
000060  6e746572
000064  204d6163
000068  20616464
00006c  72657373
000070  20283642
000074  79746529
000078  202d2d3e
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L20.128|
000080  256300            DCB      "%c",0
000083  00                DCB      0
                  |L20.132|
                          DCD      __stdin
                  |L20.136|
000088  0a0d00            DCB      "\n\r",0
00008b  00                DCB      0

                          AREA ||i.run_SysGetPhyRate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  run_SysGetPhyRate PROC
;;;353    
;;;354    int run_SysGetPhyRate(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;355    {
000004  4605              MOV      r5,r0
;;;356    	T_HDPLC_EXTCMD_SYSTEMCMD_REQ	*theReq;
;;;357    	int ret;
;;;358    	int i=0;
000006  2400              MOVS     r4,#0
;;;359    	unsigned char *theBuf;
;;;360    	unsigned char *str1="uf_phyrate get ";
000008  f20f08ac          ADR.W    r8,|L21.184|
;;;361    	unsigned char *str2=" -mbps";
00000c  a72e              ADR      r7,|L21.200|
;;;362    
;;;363    	int theLen;
;;;364    	int theRem;
;;;365    	//char *str="uf_mac get";
;;;366    
;;;367    	ret=Initialize(inPlc,D_COM_SYSTEMCMD,sizeof(T_HDPLC_EXTCMD_SYSTEMCMD_REQ));
00000e  f44f6280          MOV      r2,#0x400
000012  f64d71f0          MOV      r1,#0xdff0
000016  f7fffffe          BL       Initialize
;;;368    	if(ret == D_RETURN_SUCCESS)
00001a  2801              CMP      r0,#1
00001c  d002              BEQ      |L21.36|
;;;369    	{
;;;370    		theReq=(T_HDPLC_EXTCMD_SYSTEMCMD_REQ *)GetCmdBody(inPlc);
;;;371    		theBuf=theReq->cmdline;
;;;372    
;;;373    		for(i=0;i<12;i++)
;;;374    		{
;;;375    		 	inMac[i]=inStr[i+1];
;;;376    		}
;;;377    		inMac[i]='\0';
;;;378    
;;;379    		strcpy(inCmd,str1);
;;;380    		strcat(inCmd,inMac);
;;;381    		strcat(inCmd,str2);
;;;382    		printf("\n\r");
;;;383    		//replaceChar(inCmd);
;;;384    		printf("system command:%s\n\r",inCmd);
;;;385    		strcpy(theBuf,inCmd);
;;;386    
;;;387    		theLen=strlen((char *)theReq->cmdline)+1;
;;;388    		theRem=4-(theLen%4);
;;;389    		if(theRem!=4)
;;;390    		{
;;;391    			for(i=0;i<theRem;i++)
;;;392    			{
;;;393    				theReq->cmdline[theLen+i]=0xff;
;;;394    			}
;;;395    			inPlc->m_pCmdData->cmdlength = 8+sizeof(char)*theLen+theRem;
;;;396    			inPlc->m_pCmdData->length = (unsigned short)(16+sizeof(char)*theLen+theRem);
;;;397    		}else
;;;398    		{
;;;399    			inPlc->m_pCmdData->cmdlength = 8+sizeof(char)*theLen;
;;;400    			inPlc->m_pCmdData->length = (unsigned short)(16+sizeof(char)*theLen);
;;;401    		}
;;;402    
;;;403    		return D_RETURN_SUCCESS;
;;;404    
;;;405    	}else
;;;406    	return D_RETURN_FAILURE;
00001e  2000              MOVS     r0,#0
                  |L21.32|
;;;407    }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L21.36|
000024  682e              LDR      r6,[r5,#0]            ;370
000026  4b2a              LDR      r3,|L21.208|
000028  492a              LDR      r1,|L21.212|
00002a  361c              ADDS     r6,r6,#0x1c           ;370
                  |L21.44|
00002c  1918              ADDS     r0,r3,r4              ;375
00002e  7842              LDRB     r2,[r0,#1]            ;375
000030  1c60              ADDS     r0,r4,#1              ;373
000032  550a              STRB     r2,[r1,r4]            ;375
000034  4604              MOV      r4,r0                 ;373
000036  280c              CMP      r0,#0xc               ;373
000038  dbf8              BLT      |L21.44|
00003a  2000              MOVS     r0,#0                 ;377
00003c  5508              STRB     r0,[r1,r4]            ;377
00003e  4825              LDR      r0,|L21.212|
000040  4641              MOV      r1,r8                 ;379
000042  3864              SUBS     r0,r0,#0x64           ;379
000044  f7fffffe          BL       strcpy
000048  4922              LDR      r1,|L21.212|
00004a  f1a10064          SUB      r0,r1,#0x64           ;380
00004e  f7fffffe          BL       strcat
000052  4820              LDR      r0,|L21.212|
000054  4639              MOV      r1,r7                 ;381
000056  3864              SUBS     r0,r0,#0x64           ;381
000058  f7fffffe          BL       strcat
00005c  a01e              ADR      r0,|L21.216|
00005e  f7fffffe          BL       __2printf
000062  491c              LDR      r1,|L21.212|
000064  a01d              ADR      r0,|L21.220|
000066  3964              SUBS     r1,r1,#0x64           ;384
000068  f7fffffe          BL       __2printf
00006c  4919              LDR      r1,|L21.212|
00006e  4630              MOV      r0,r6                 ;385
000070  3964              SUBS     r1,r1,#0x64           ;385
000072  f7fffffe          BL       strcpy
000076  4630              MOV      r0,r6                 ;387
000078  f7fffffe          BL       strlen
00007c  1c40              ADDS     r0,r0,#1              ;387
00007e  17c1              ASRS     r1,r0,#31             ;388
000080  eb007191          ADD      r1,r0,r1,LSR #30      ;388
000084  f0210103          BIC      r1,r1,#3              ;388
000088  1a41              SUBS     r1,r0,r1              ;388
00008a  f1c10204          RSB      r2,r1,#4              ;388
00008e  2a04              CMP      r2,#4                 ;389
000090  d008              BEQ      |L21.164|
000092  2100              MOVS     r1,#0                 ;391
000094  23ff              MOVS     r3,#0xff              ;393
000096  e002              B        |L21.158|
                  |L21.152|
000098  1844              ADDS     r4,r0,r1              ;393
00009a  1c49              ADDS     r1,r1,#1              ;391
00009c  5533              STRB     r3,[r6,r4]            ;393
                  |L21.158|
00009e  4291              CMP      r1,r2                 ;391
0000a0  dbfa              BLT      |L21.152|
0000a2  4410              ADD      r0,r0,r2              ;395
                  |L21.164|
0000a4  682a              LDR      r2,[r5,#0]            ;399
0000a6  f1000108          ADD      r1,r0,#8              ;399
0000aa  3010              ADDS     r0,r0,#0x10           ;400
0000ac  6111              STR      r1,[r2,#0x10]         ;400
0000ae  6829              LDR      r1,[r5,#0]            ;400
0000b0  8148              STRH     r0,[r1,#0xa]          ;400
0000b2  2001              MOVS     r0,#1                 ;403
0000b4  e7b4              B        |L21.32|
;;;408    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L21.184|
0000b8  75665f70          DCB      "uf_phyrate get ",0
0000bc  68797261
0000c0  74652067
0000c4  65742000
                  |L21.200|
0000c8  202d6d62          DCB      " -mbps",0
0000cc  707300  
0000cf  00                DCB      0
                  |L21.208|
                          DCD      inStr
                  |L21.212|
                          DCD      ||.bss||+0x64
                  |L21.216|
0000d8  0a0d00            DCB      "\n\r",0
0000db  00                DCB      0
                  |L21.220|
0000dc  73797374          DCB      "system command:%s\n\r",0
0000e0  656d2063
0000e4  6f6d6d61
0000e8  6e643a25
0000ec  730a0d00

                          AREA ||i.run_SystemCmd||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  run_SystemCmd PROC
;;;289    
;;;290    int run_SystemCmd(struct C_HDPLC_EXTCMD_IF *inPlc)
000000  b570              PUSH     {r4-r6,lr}
;;;291    {
000002  4605              MOV      r5,r0
;;;292    	T_HDPLC_EXTCMD_SYSTEMCMD_REQ	*theReq;
;;;293    	int ret;
;;;294    	int i=0;
000004  2600              MOVS     r6,#0
;;;295    	unsigned char *theBuf;
;;;296    	char c;
;;;297    
;;;298    	int theLen;
;;;299    	int theRem;
;;;300    	//char *str="uf_mac get";
;;;301    
;;;302    	ret=Initialize(inPlc,D_COM_SYSTEMCMD,sizeof(T_HDPLC_EXTCMD_SYSTEMCMD_REQ));
000006  f44f6280          MOV      r2,#0x400
00000a  f64d71f0          MOV      r1,#0xdff0
00000e  f7fffffe          BL       Initialize
;;;303    	if(ret == D_RETURN_SUCCESS)
000012  2801              CMP      r0,#1
000014  d001              BEQ      |L22.26|
;;;304    	{
;;;305    		theReq=(T_HDPLC_EXTCMD_SYSTEMCMD_REQ *)GetCmdBody(inPlc);
;;;306    		theBuf=theReq->cmdline;
;;;307    
;;;308    		//strcpy(theBuf,str);
;;;309    		printf("Please input system command -->");
;;;310    		while((c=getc(stdin))!=13)
;;;311    		{
;;;312    			 theBuf[i]=c;
;;;313    			 printf("%c",c);
;;;314    			 i++;
;;;315    		}
;;;316    		theBuf[i]='\0';
;;;317    		printf("\n\r");
;;;318    		//printf("system command:%s\n\r",theBuf);
;;;319    
;;;320    		theLen=strlen((char *)theReq->cmdline)+1;
;;;321    		theRem=4-(theLen%4);
;;;322    		if(theRem!=4)
;;;323    		{
;;;324    			for(i=0;i<theRem;i++)
;;;325    			{
;;;326    				theReq->cmdline[theLen+i]=0xff;
;;;327    			}
;;;328    			inPlc->m_pCmdData->cmdlength = 8+sizeof(char)*theLen+theRem;
;;;329    			inPlc->m_pCmdData->length = (unsigned short)(16+sizeof(char)*theLen+theRem);
;;;330    		}else
;;;331    		{
;;;332    			inPlc->m_pCmdData->cmdlength = 8+sizeof(char)*theLen;
;;;333    			inPlc->m_pCmdData->length = (unsigned short)(16+sizeof(char)*theLen);
;;;334    		}
;;;335    
;;;336    		return D_RETURN_SUCCESS;
;;;337    
;;;338    	}else
;;;339    	return D_RETURN_FAILURE;
000016  2000              MOVS     r0,#0
;;;340    
;;;341    }
000018  bd70              POP      {r4-r6,pc}
                  |L22.26|
00001a  682c              LDR      r4,[r5,#0]            ;305
00001c  a01a              ADR      r0,|L22.136|
00001e  341c              ADDS     r4,r4,#0x1c           ;305
000020  f7fffffe          BL       __2printf
000024  e004              B        |L22.48|
                  |L22.38|
000026  55a1              STRB     r1,[r4,r6]            ;312
000028  a01f              ADR      r0,|L22.168|
00002a  f7fffffe          BL       __2printf
00002e  1c76              ADDS     r6,r6,#1              ;314
                  |L22.48|
000030  481e              LDR      r0,|L22.172|
000032  f7fffffe          BL       getc
000036  b2c1              UXTB     r1,r0                 ;310
000038  290d              CMP      r1,#0xd               ;310
00003a  d1f4              BNE      |L22.38|
00003c  2100              MOVS     r1,#0                 ;316
00003e  55a1              STRB     r1,[r4,r6]            ;316
000040  a01b              ADR      r0,|L22.176|
000042  f7fffffe          BL       __2printf
000046  4620              MOV      r0,r4                 ;320
000048  f7fffffe          BL       strlen
00004c  1c40              ADDS     r0,r0,#1              ;320
00004e  17c1              ASRS     r1,r0,#31             ;321
000050  eb007191          ADD      r1,r0,r1,LSR #30      ;321
000054  f0210103          BIC      r1,r1,#3              ;321
000058  1a41              SUBS     r1,r0,r1              ;321
00005a  f1c10204          RSB      r2,r1,#4              ;321
00005e  2a04              CMP      r2,#4                 ;322
000060  d008              BEQ      |L22.116|
000062  2100              MOVS     r1,#0                 ;324
000064  23ff              MOVS     r3,#0xff              ;326
000066  e002              B        |L22.110|
                  |L22.104|
000068  1846              ADDS     r6,r0,r1              ;326
00006a  1c49              ADDS     r1,r1,#1              ;324
00006c  55a3              STRB     r3,[r4,r6]            ;326
                  |L22.110|
00006e  4291              CMP      r1,r2                 ;324
000070  dbfa              BLT      |L22.104|
000072  4410              ADD      r0,r0,r2              ;328
                  |L22.116|
000074  682a              LDR      r2,[r5,#0]            ;332
000076  f1000108          ADD      r1,r0,#8              ;332
00007a  3010              ADDS     r0,r0,#0x10           ;333
00007c  6111              STR      r1,[r2,#0x10]         ;333
00007e  6829              LDR      r1,[r5,#0]            ;333
000080  8148              STRH     r0,[r1,#0xa]          ;333
000082  2001              MOVS     r0,#1                 ;336
000084  bd70              POP      {r4-r6,pc}
;;;342    
                          ENDP

000086  0000              DCW      0x0000
                  |L22.136|
000088  506c6561          DCB      "Please input system command -->",0
00008c  73652069
000090  6e707574
000094  20737973
000098  74656d20
00009c  636f6d6d
0000a0  616e6420
0000a4  2d2d3e00
                  |L22.168|
0000a8  256300            DCB      "%c",0
0000ab  00                DCB      0
                  |L22.172|
                          DCD      __stdin
                  |L22.176|
0000b0  0a0d00            DCB      "\n\r",0
0000b3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  inCmd
                          %        100
                  inMac
                          %        20
